[{"content":"エラーコード\r1 ImportError: cannot import name \u0026#39;_lazywhere\u0026#39; from \u0026#39;scipy._lib._util\u0026#39; 原因と解決策\r2025年6月23日リリースした scipy 1.16.0 がサポートしていないのが原因である。\n1.15.3 バージョンをインストールしたら問題が解決する。\n現在の scipy をアンインストールする\n1 pip uninstall scipy 1.15.3 バージョンの scipy をインストールする。\n1 pip install scipy==1.15.3 ","date":"2025-07-08T12:17:39+09:00","permalink":"https://blog.icysamon.jp/post/esp32-csi-cannot-import-name-_lazywhere-from-scipy._lib._util-%E3%82%92%E8%A7%A3%E6%B1%BA%E3%81%99%E3%82%8B/","title":"ESP32 CSI - cannot import name '_lazywhere' from 'scipy._lib._util' を解決する"},{"content":"先日 「ESP32 のキラキラはどこに行っちゃった」という記事が書いたが、まだ結論が出てない。\nもちろん、私ような「どうなってもいいや」の人としてはこの問題にもう興味がないので放置したいか、でもこの問題が簡単過ぎでもし解決しないなら「もしかしてこいつ技術力とても低いなのか」と思われるかもしれないので、まあ実際もそうけれど、やはりこの問題を終わらせる方がいいと思う。\nそして本題に入ろう！原理図を調べて、この基板の唯一の LED はやはり電源と直接繋がっている。GPIO でコントロールのは不可能だ！（ずんだもんの声）\n以上。\n","date":"2025-07-03T21:23:37+09:00","image":"https://image.icysamon.jp/blog/2025/07/esp32-led-vcc.webp","permalink":"https://blog.icysamon.jp/post/esp32-%E3%81%AE%E3%82%AD%E3%83%A9%E3%82%AD%E3%83%A9%E3%81%8C%E3%81%AA%E3%81%8B%E3%81%A3%E3%81%9F/","title":"ESP32 のキラキラがなかった"},{"content":"今日、研究生として東京工科大学を入学した。\n5月7日先生へのメールから2ヶ月経った。途中には様々の面談、帰国などのことがあったが、ようやく思う通りに日本の大学に入った。そして研究内容も私が続きたいの IoT 分野と電子工作。\nでもこんなに早く入学するのは流石に思えなかった。修士出願まであと1ヶ月なのに。\n今日は思ったより良かった。何人かの熱心な日本人メンバーと交流した。最初は0人だと思った。話し掛けて本当にありがとう。\n研究室のミーティングも面白い話があったが、守秘義務契約を契約したので、研究室の研究内容に関する話ができない。ごめん。\n今は研究生のでまだ頑張らなきゃならない。明日も忙しい日々になるだろう。\n","date":"2025-07-01T22:09:19+09:00","image":"https://image.icysamon.jp/blog/2025/07/kennkixyuusei-01.webp","permalink":"https://blog.icysamon.jp/post/%E7%A0%94%E7%A9%B6%E7%94%9F%E5%85%A5%E5%AD%A6/","title":"研究生入学"},{"content":"本日にはマイコン ESP32-WROOM-32E開発ボード の開発環境を構築した。有名なマイコンので私もよく知っているが、実際使うのは初めてだ。\n本来は一時間ぐらいで完成できると想定したが、予想外の問題が一つ一つあったので、最終には一日掛かった。\nまあ電子工作でよくある話。\n中国製のソフトに私が不信感が高いので（例えオープンソースでも）、公式が開発した Espressif-IDE ではなく ESP-IDF を使った VS Code 環境を構築するを選びた。\n最初にはシリアルポートが見つからない問題があったが、このボードでは USB-Serial Port 変換機能がないと思って、USB-Serial 変換モジュールを使った。\n以前 STM32 で開発時使った USB to TTL モジュールを試したが、うまくいかなかった。公式のドキュメントを見たら GPIO0 と EN に繋がられる変換モジュールが必要らしい。でもそのモジュールなら私もある。以前買った後から使ったことがないけれど。\nそしてうまく行った。\nでも最後には wacom のペンタブレットの USB Type-B 線を使ったら変換モジュールなしで直接に PC と繋がることができるが分かった。\nやはり廉価な線がダメだな。\nRaspberry Pi Pico より大きいので手元のブレッドボードが使えない、残念。\n一日掛かってようやくプログラムを ESP32 にダウンロードしたが、キラキラ✨（LED 点滅）がない。\nでもポートモニタリングを開けたら確かにプログラムが正常に実行している。\nGPIO の設定が間違いと思うがコードはちゃんと BLINK_GPIO として書いている。\n資料を調べたらその LED は電源の状態を示すためのものであるらしい。もしかしてユーザでコントロールことができないのかな。\n","date":"2025-06-28T23:03:31+09:00","image":"https://image.icysamon.jp/blog/2025/06/kirakira-01.webp","permalink":"https://blog.icysamon.jp/post/esp32-%E3%81%AE%E3%82%AD%E3%83%A9%E3%82%AD%E3%83%A9%E3%81%AF%E3%81%A9%E3%81%93%E3%81%AB%E8%A1%8C%E3%81%A3%E3%81%A1%E3%82%83%E3%81%A3%E3%81%9F/","title":"ESP32 のキラキラはどこに行っちゃった"},{"content":"前言\r最近 WordPress から Hugo に移行したので、PaperMod というテーマを気になってサイトのテーマとして選びた。しかし、ローカルテストの場合が正常に工作しているのに、GitHub Pages にアップロードしたらページのスタイルが潰された。\nbaseURL が正常に設定されているので、一時的に原因が分からなくなった。その時、開発ツールでサイトをチェックした後、このエラーコードが発見した。\nFailed to find a valid digest in the integrity attribute for resource.\n原因と解決策\r一言で言えばサブリソース完全性検証に通らなかった。\nコンフィグファイルで検証機能を無効化して解決する策もあるが、サイトの安全性が下がられる。\n完全に Wiki に書いた方法で構築したのに、なぜこんな問題が起こされたのかが気になっている。\nそして様々のことを調べて、この解決策を見つけた。\nThe best solution I have found so far, If you are building your Hugo site on Windows, in your .github.io GitHub Pages repository, add a .gitattributes file that requests CSS files be checked out with CR/LF line endings with the line *.css text eol=crlf e.g.\nSource : Failed to find a valid digest in the integrity attribute #114\nまさかに改行コードの問題だ。\nこの解決策によって、.gitattributes ファイルを作成して、 *.css text eol=crlf を中に書いてください。そしてファイルを再アップロードして改行コードを CRLF に更新すれば解決できる。\nサイトが正常になった。\n","date":"2025-06-26T19:46:54+09:00","permalink":"https://blog.icysamon.jp/post/hugo-github-pages-%E3%81%A7-papermod-%E3%81%8C%E6%BD%B0%E3%81%95%E3%82%8C%E3%81%9F%E5%95%8F%E9%A1%8C%E3%82%92%E8%A7%A3%E6%B1%BA%E3%81%99%E3%82%8B/","title":"Hugo - GitHub Pages で PaperMod が潰された問題を解決する"},{"content":"以下のリンクで Next.js をインストールしてください。\nhttps://nextjs.org/docs/app/getting-started/installation\n以下のリンクで三目並べゲームのデモをダウンロードしてください。詳しい方法はサイトに書いている。\nhttps://ja.react.dev/learn/tutorial-tic-tac-toe\nダウンロードしたアーカイブを解凍し、ターミナルを開いて解凍したディレクトリに移動してください。\n以下のコードを実行して権限を与えてください。\n1 Set-ExecutionPolicy RemoteSigned -Scope Process 依存ライブラリをインストール。\n1 npm install ローカルサーバを起動する。\n1 npm startnpm start ","date":"2025-06-14T21:38:00+09:00","permalink":"https://blog.icysamon.jp/post/windows11-%E3%81%A7-react-%E7%92%B0%E5%A2%83%E3%82%92%E6%A7%8B%E7%AF%89%E3%81%99%E3%82%8B/","title":"Windows11 で React 環境を構築する"},{"content":"事前準備\rRaspberry Pi Pico C SDK の開発環境が必要である。\nこの記事の内容は主に VS Code を使っている。\nFreeRTOS 配置\rGitHub - raspberrypi/pico-examples/freertos/ で FreeRTOS_Kernel_import.cmake, FreeRTOSConfig_examples_common.h, FreeRTOSConfig.h 三つのファイルを自分のプロジェクトにコピーしてください。\nここでは、FreeRTOSConfig.h は FreeRTOSConfig_examples_common.h の設定を参考している。\nCMakeLists.txt で FreeRTOS の配置をする必要があるため、以下の内容を追加または変更してください。\nFreeRTOS-Kernel 環境変数の設定\r1 set(FREERTOS_KERNEL_PATH ${USERHOME}/.pico-sdk/FreeRTOS-Kernel CACHE PATH \u0026#34;Path to FreeRTOS Kernel\u0026#34;) ${USERHOME}/.pico-sdk/FreeRTOS-Kernel を自分のパスに変更してください。\nFreeRTOS-kernel をインストールしていない方はこちらでダウンロードしてください。\nhttps://github.com/FreeRTOS/FreeRTOS-Kernel\nFreeRTOS Kernel ライブラリのインクルド\r1 2 # FREERTOS: include FreeRTOS Kernel libraries include(FreeRTOS_Kernel_import.cmake) 共通依存ライブラリのリンク\r1 2 3 4 5 6 7 8 9 10 11 # pull in common dependencies target_link_libraries(blink pico_stdlib FreeRTOS-Kernel-Heap4 ) if (PICO_CYW43_SUPPORTED) target_link_libraries(blink pico_cyw43_arch_none FreeRTOS-Kernel-Heap4 ) endif() 以上の変更を完了後、プロジェクトをコンパイルしてください。\nLED タスクの設定\rメインファイルで基本設定の上で FreeRTOS.h と task.h を追加してください。\n1 2 #include \u0026#34;FreeRTOS.h\u0026#34; #include \u0026#34;task.h\u0026#34; LED の操作について、こちらは blink demo の関数 pico_set_led(bool led_on) を使っている。\n1 2 3 4 5 6 7 8 9 10 // Turn the led on or off void pico_set_led(bool led_on) { #if defined(PICO_DEFAULT_LED_PIN) // Just set the GPIO on or off gpio_put(PICO_DEFAULT_LED_PIN, led_on); #elif defined(CYW43_WL_GPIO_LED_PIN) // Ask the wifi \u0026#34;driver\u0026#34; to set the GPIO on or off cyw43_arch_gpio_put(CYW43_WL_GPIO_LED_PIN, led_on); #endif } 次からは自分で書いた部分。\nled_task と言うタスク関数を作成してください。\n1 2 3 4 5 6 7 8 9 10 void led_task() { int rc = pico_led_init(); hard_assert(rc == PICO_OK); while (true) { pico_set_led(true); vTaskDelay(pdMS_TO_TICKS(1000)); pico_set_led(false); vTaskDelay(pdMS_TO_TICKS(1000)); } } ここでは、1000ms のディレイを設定する。\n最後にはメイン関数で以下の内容を書いてください。\n1 2 3 4 5 int main() { stdio_init_all(); xTaskCreate(led_task, \u0026#34;LED Task\u0026#34;, 256, NULL, 1, NULL); vTaskStartScheduler(); } stdio_init_all - すべて標準 stdio タイプを初期化する。\nxTaskCreate - 新しいタスクを作成する。\nvTaskStartScheduler - RTOS スケジュールを実行する。\nLED が正常に1秒ごとに動かした。\n","date":"2025-06-13T21:03:00+09:00","permalink":"https://blog.icysamon.jp/post/raspberry-pi-pico-freertos-%E3%81%AE%E9%85%8D%E7%BD%AE%E3%81%A8-led-%E3%82%BF%E3%82%B9%E3%82%AF%E3%81%AE%E8%A8%AD%E5%AE%9A/","title":"Raspberry Pi Pico - FreeRTOS の配置と LED タスクの設定"},{"content":"先日、一年ぶりに中国へ行ってきた。\n本来は行きたくないが、大学院入試の出願書類のため、仕方がなかった。\nそして再び済南に行ってきた。\n済南\r大学校門前で倒れているレンタサイクルがあった。\n去年から建ったばかりなのにもう既に放置された人工湖。\nそして去年撮った写真。\n工事費が横領されたのか、赤字問題のため政府からの資金が減少されたのか、どっちが原因なのか分からない。\nでもこのようなことはもう慣れた、この国にとってよくある話。\n大学で手続きが完了した後、付近の商業街に来た。\n平日の昼ので人はほとんどなかった、夜になったら少し賑やかになるだろう。\n倒産した店がたくさんあるらしい。\n済南特有の超意興で昼ご飯を済ませた。安いし美味しいし、大学時代にはよく世話になった。\n約250円。中国の物価で見てもとても安い。\n駅へ行く途上、北校門が見えた。デリバリー配達員がいる。以前私もよく注文した。\n天津\r天津は済南に近いし、そして日本への安い直通便があるので、天津も行ってきた。\nホテルへ行く途上、こんなものがあった。\n原因は多分これだよな。\n天津の世紀鐘。\n周辺の建物。\n向こう岸で見ると。\n中国共産党は合法性のため、いつもどこにも政治宣伝がしている。もちろん国際空港にも。\n本来はたくさんことが言いたいが、やはり何も言わない方がいい。\n不動産にも、デフレにも、共産運動にも、私ともう一切関係ない。\n自業自得だ。\n","date":"2025-06-08T17:21:00+09:00","image":"https://image.icysamon.jp/blog/2025/06/travel-01.webp","permalink":"https://blog.icysamon.jp/post/%E3%82%82%E3%81%86%E9%96%A2%E4%BF%82%E3%81%AA%E3%81%84/","title":"もう関係ない"},{"content":"テーマの functions.php に以下のコードを追加してください。\n1 2 3 4 5 6 7 8 9 10 11 12 function custom_smtp_settings($phpmailer) { $phpmailer-\u0026gt;isSMTP(); $phpmailer-\u0026gt;Host = SMTP_HOST; $phpmailer-\u0026gt;Port = SMTP_PORT; $phpmailer-\u0026gt;Username = SMTP_USER; $phpmailer-\u0026gt;Password = SMTP_PASS; $phpmailer-\u0026gt;FromName = SMTP_NAME; $phpmailer-\u0026gt;From = SMTP_FROM; $phpmailer-\u0026gt;SMTPSecure = SMTP_SECURE; $phpmailer-\u0026gt;SMTPAuth = SMTP_AUTH; } add_action(\u0026#39;phpmailer_init\u0026#39;, \u0026#39;custom_smtp_settings\u0026#39;); wp-config.php で環境変数を定義してください。\n1 2 3 4 5 6 7 8 define(\u0026#39;SMTP_HOST\u0026#39;, \u0026#39;smtp.mail.me.com\u0026#39;); define(\u0026#39;SMTP_PORT\u0026#39;, 587); define(\u0026#39;SMTP_USER\u0026#39;, \u0026#39;iCloud アカウント\u0026#39;); define(\u0026#39;SMTP_PASS\u0026#39;, \u0026#39;アプリ用パスワード\u0026#39;); define(\u0026#39;SMTP_NAME\u0026#39;, \u0026#39;発信者名前\u0026#39;); define(\u0026#39;SMTP_FROM\u0026#39;, \u0026#39;発信メール\u0026#39;); define(\u0026#39;SMTP_SECURE\u0026#39;, \u0026#39;tls\u0026#39;); define(\u0026#39;SMTP_AUTH\u0026#39;, true); iCloud アカウント は Apple で設定したメインメールである。\nアプリ用パスワード は https://account.apple.com で作成してください。\n発信メール は通知に利用するメールである。事前カスタムメールでメールアドレスを作成必要がある。\n","date":"2025-06-03T15:20:00+09:00","permalink":"https://blog.icysamon.jp/post/icloud-%E3%82%AB%E3%82%B9%E3%82%BF%E3%83%A0%E3%83%A1%E3%83%BC%E3%83%AB%E3%82%92-wordpress-%E3%81%AE%E9%80%9A%E7%9F%A5%E3%83%A1%E3%83%BC%E3%83%AB%E3%81%AB%E8%A8%AD%E5%AE%9A%E3%81%99%E3%82%8B/","title":"iCloud カスタムメールを WordPress の通知メールに設定する"},{"content":"今日は夢を見た。\n中国のケーキ屋でケーキを買っている。値段は26元（中国の通貨単位）だったが、見た目が悪かったので、値段を切って21元で買うと店主と合意した。\nしかし、会計の際、レジのスタッフは最初の値段通り26元を請求した。私はすでに店主と21元まで交渉したと伝えたが、スタッフは嫌な顔をして私を無視し、他のお客さんの会計を優先し続けた。\n私はその場で放置され、30分ほど待たされた。\nその後、店主がやってきて、レジに46元と入力した。私は請求金額が間違っていることに気づかず、急いでスマホでコードをスキャンして支払いした。しかし、残高不足だったため、不正な金額で払うことを避けた。\nそして「価格が違う」と店主に指摘すると、店主はやっと26元に修正したが、それを見て私は「21元のはず」と主張し続けた。店主はなかなか対応せず、さらに10分以上のやりとりをした末、ようやく21元に修正された。\n最後には、店主は「少ない金額だと会計記録の追跡が怖い」と言って、私の支払いを拒否した。私は「外国のカードならいいだろ」と言うと、店主はようやく納得し、支払いを受け入れた。\nChatGPTからの解読\r数字と価格：価値観の象徴\r夢の中で「ケーキの価格」が最初は26で提示され、交渉の末に21まで値下げされました。この「数字の差」は、あなた自身が現実の中で自分の価値や周囲からの評価に対して「納得できない」「ズレを感じる」心情を映し出している可能性があります。\n数字の変動は、自分が受け取るべき正当な評価や報酬についての葛藤や疑問を象徴しているとも考えられます。\nそして、店主がレジで突然入力した「46」という予想外の高額は、現実の中であなたが感じる「不当な要求」や「想定外の負担感」を示唆している可能性があります。支払いが失敗したことで、結果的に不公平な取引を回避できたというエピソードは、潜在的に自分を守ろうとする防衛本能が働いていることを表しています。\n権威とコミュニケーション：上司や社会的立場との関係性\r夢の中に登場する「店主」や「店員」とのやり取りは、あなたが現実で接している権威的存在（上司や先生、あるいは社会的なルールや組織）との関係を象徴しています。\nあなたは「価格交渉で合意した」という事実を主張しても、店員はそれを無視し続ける――これは現実世界でも「自分の意見が軽視された」「声が届かない」と感じた経験が投影されているのかもしれません。\nまた、待たされた時間や、交渉がなかなかまとまらず停滞し続ける状況は、現実においても「問題解決が進まない」「誰も話を聞いてくれない」「納得できない状態が続いている」という精神的ストレスや無力感の表現とも解釈できます。\n金銭と支払い方法：安心感と信頼の象徴\r夢の最後に「国外銀行での支払いなら受け入れる」と店主が言う場面は、単なる支払い手段ではなく信頼や安全の感覚を象徴しています。\n通常の方法では店主が取引を拒否したという点から、あなたが日常的なルールや信頼関係では安心できない状況に置かれている可能性が考えられます。\n「国外の銀行」という設定は、現状の環境（職場や人間関係）から離れて、より安全で確実な選択肢を求めている心理的な欲求の表れかもしれません。\n自己価値と公正感への欲求\rこの夢は全体を通じて、あなたの内面にある公平さへの強い欲求や自分の価値を正当に認められたいという思いを色濃く反映しています。\nあなたは夢の中で「最初に合意した21の価格」を何度も主張していますが、相手はルールを変えたり無視したりして、あなたの納得を妨げます。これは現実でも「自分の努力や存在が不当に扱われている」と感じた記憶や経験が、夢の中で形を変えて現れている可能性があります。\n体制や権力への不信感\r夢の中で、価格が店側の都合で簡単に変えられてしまうという状況は、現実の中であなたが直面している不安定なルールや権力構造への疑念を象徴していると考えられます。\n特に、店主という「決定権を持つ存在」が最後まであなたの希望を拒み続ける様子は、あなたが現実で感じている社会的圧力や理不尽さへの不満、または「自分ではコントロールできない環境」に対する無力感を暗示しています。\nこの夢は、あなたが「どうすれば不公平な状況でも自分の立場を守れるか」「どうすれば納得できる形で問題を解決できるか」を潜在的に考えていることの反映だとも言えるでしょう。\n","date":"2025-04-10T21:45:00+09:00","permalink":"https://blog.icysamon.jp/post/21%E3%81%B8%E3%81%AE%E5%9F%B7%E5%BF%B5/","title":"21への執念"},{"content":"クエリ\r1 UPDATE \u0026lt;テーブル\u0026gt; SET \u0026lt;カラム\u0026gt; = REPLACE(\u0026lt;カラム\u0026gt;, \u0026lt;置換前の文字列\u0026gt;, \u0026lt;置換後の文字列\u0026gt;); 例えば、私の場合は\n1 UPDATE wp_2_posts SET post_content = REPLACE(post_content, \u0026#39;www.cdn\u0026#39;, \u0026#39;cdn\u0026#39;); テーブルとは\rデータベース構造の中にある wp_posts ようなものがテーブルという。\nカラムとは\rテーブル中にある post_content ようなものがカラムという。\n","date":"2025-03-04T13:35:00+09:00","permalink":"https://blog.icysamon.jp/post/phpmyadmin-%E3%81%A7%E6%96%87%E5%AD%97%E5%88%97%E3%82%92%E4%B8%80%E6%8B%AC%E7%BD%AE%E6%8F%9B%E3%81%99%E3%82%8B/","title":"phpMyAdmin で文字列を一括置換する"},{"content":"ターミナルで以下の内容を入力してください。\n1 ssh \u0026lt;ユーザー名\u0026gt;@\u0026lt;サーバーのアドレス\u0026gt; 例えば、私の場合は\n1 ssh mail@icysamon.jp 快速接続\r最初はターミナルの設定を開けて、新しいプロファイルを追加してください。\nそして名前とコマンドラインを設定してください。\nコマンドラインは以下のようになる。\n1 ssh icysamon@icysamon.sakura.ne.jp -i C:\\Users\\icysa\\OneDrive\\Documents\\Key\\id_ecdsa.pem ユーザー名：icysamon サーバー名：icysamon.sakura.ne.jp SSH公開鍵ファイルのパス：C:\\Users\\icysa\\OneDrive\\Documents\\Key\\id_ecdsa.pem 以上のパラメータを自分の情報に置換してください。\nそしてプラスボタンでさっき作ったプロファイルを開けましょう。\n正常に起動した。\n","date":"2025-03-01T10:32:00+09:00","permalink":"https://blog.icysamon.jp/post/windows-%E3%82%BF%E3%83%BC%E3%83%9F%E3%83%8A%E3%83%AB%E3%81%A7-ssh-%E3%82%92%E4%BD%BF%E3%81%86/","title":"Windows ターミナルで SSH を使う"},{"content":"前言\r最近 X-AI が毎月 150 ドルの無料クレジットを配布するイベントを開催しているので X-AI のアカウントを作りました。ただし、条件として個人情報の提供と 5 ドルのチャージが必要なのでご注意してください。\n本題\r公式のガイド\n最初は https://console.x.ai/ でアカウントを作って API key を発行してください。\nAPI key は一度しか表示されないので、しっかり保存してください。\n次は pip で openai をインストールしてください。\n1 pip install openai そして python ファイルを作成し、以下の内容を書いてください。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 import os from openai import OpenAI XAI_API_KEY = os.getenv(\u0026#34;XAI_API_KEY\u0026#34;) client = OpenAI( api_key=XAI_API_KEY, base_url=\u0026#34;https://api.x.ai/v1\u0026#34;, ) completion = client.chat.completions.create( model=\u0026#34;grok-2-latest\u0026#34;, messages=[ { \u0026#34;role\u0026#34;: \u0026#34;system\u0026#34;, \u0026#34;content\u0026#34;: \u0026#34;You are Grok, a chatbot inspired by the Hitchhikers Guide to the Galaxy.\u0026#34; }, { \u0026#34;role\u0026#34;: \u0026#34;user\u0026#34;, \u0026#34;content\u0026#34;: \u0026#34;What is the meaning of life, the universe, and everything?\u0026#34; }, ], ) print(completion.choices[0].message.content) api_key=XAI_API_KEY の XAI_API_KEY を自分の key に変更してください。\n最後はターミナルでこのファイルを実行してください。\n1 python.exe \u0026lt;file path\u0026gt; を自分のファイルのパスに置き換えてください。\n","date":"2025-02-19T14:35:00+09:00","permalink":"https://blog.icysamon.jp/post/python-%E3%81%A7-x-ai-api-%E3%82%92%E4%BD%BF%E3%81%86/","title":"Python で X-AI API を使う"},{"content":"CSS\rテーマフォルダ内に CSS ファイルを作って以下の内容を書いてください。\n1 2 3 4 .wp-block { max-width: 1280px; margin: auto; } functions.php\rテーマの functions.php に以下の内容を追加してください。\n1 2 3 4 5 6 7 8 function add_gutenberg_editor_style() { wp_register_style( \u0026#39;editorCSS\u0026#39;, get_stylesheet_directory_uri().\u0026#39;/assets/css/editor.css\u0026#39; ); wp_enqueue_style(\u0026#39;editorCSS\u0026#39;); } add_action( \u0026#39;enqueue_block_editor_assets\u0026#39;, \u0026#39;add_gutenberg_editor_style\u0026#39; ); get_stylesheet_directory_uri().'/assets/css/editor.css' はさっき作った CSS ファイルのアドレスです。\nget_stylesheet_directory_uri() はテーマのルートディレクトリまでのアドレスです。\n結果\rこんな感じになります。\nポスト画面だけにする\r以上の操作を行ったらすべてのページ特にサイト編集画面のスタイルも変更される。ポストを編集ときだけ画面を中央にしたいなら CSS を以下のように変更してください。\n1 2 3 4 .post-type-post .wp-block { max-width: 1280px; margin: auto; } こうしたらポスト編集画面だけそうになれます。\nもしページ画面もそうしたいなら CSS をこうにしてください。\n1 2 3 4 5 6 7 8 .post-type-post .wp-block { max-width: 1280px; margin: auto; } .post-type-page .wp-block { max-width: 1280px; margin: auto; } ","date":"2025-02-16T18:38:00+09:00","permalink":"https://blog.icysamon.jp/post/wordpress-%E3%82%A8%E3%83%87%E3%82%A3%E3%82%BF%E3%83%BC%E3%82%92%E7%94%BB%E9%9D%A2%E4%B8%AD%E5%A4%AE%E3%81%AB%E3%81%99%E3%82%8B/","title":"WordPress - エディターを画面中央にする"},{"content":"今日は東京ゲームダンジョンへ行ってきました！私が行ったのは１日目です。\n絶対ロケット防衛主義\r最初試遊したのゲームは「絶対ロケット防衛主義」です。\nゲームのテーマは西側の思想を“矯正”する“思想衛星”を打ち上げために、最終防戦を建って、邪悪の資本主義者からロケットを守るタワーディフェンスゲームです。\nロケットの建造が七段に分割し、各階段は一つの防衛イベントに対応しています。\n私は最初から基地を一番離れた東側で防御線を建てたが、第二第三階段から敵が南側から現れました。\nそしてマジノ線になりました。\n二つ攻撃経路があるなんて全然気づなかった！邪悪の資本主義者ども目！！\nでもこのゲームは軍隊（プレイヤー）の操作ができるのでどうかなりました。\nその後私は南側で防御線も建ったが税金が足りないので基地中央はまだゼロ防御状態です。\nそして第五第六階段から空挺兵が基地中央に現れました。\n絶望的な状態です！\nでも前何回も後方勤務の同志を賄賂し、たくさん武器をもらいました。\nめっちゃ苦戦になりましたが、最後偉大な「思想衛星」が成功に打ち上げました！革命万歳！！\nwwwwwww\nRewindGirl\r次は「RewindGirl」、時間操作のアクションゲームです。\nキャラクターはめっちゃ可愛い！！\n実際このゲームは今回一番みたいゲームなのです。なぜなら私は以前のゲームジャムで同じようなゲームを作りことがありました。でもその時ゲーム開発は初めたばかりので、技術力が足りないので失敗品になりました。そしてある日このゲームを見つけて、このアイデアで真剣にゲームを作るならどのようなゲームになるか期待していた。\nでもやはり一番の原因はキャラクターが可愛い過ぎる！\nゲーム自身のステージ設計もとても良いし、単なる時間操作ではなく時間線自身達の連携も重視しています。ガイドの設計はわかり安いので不自然のところは全然ありません。期待以上の質です！！\nこのゲームは遊び方を主とするがストリーもあります。けど１０分の試遊時間制限があるのでほとんど見ていないので許してください。\nでも演出動画やイラストもとても良い（可愛い）と思います！\nLouloudi Asteri Save the Solar System\rこのゲームを見た時ただの 2D スペースショットゲームと思ったが実際 2D のような 3D ショットゲームです。\n右スティックを使ってプレイヤーがいる 3D 空間の 2D の平行線を変更することができます。\n私も 3D 空間で 2D ゲームを表現するのがいいを考えることがありますが、考え難いので放置しました。この 2D ような３Dゲームは私にとっていい経験になるかもしれません、たくさん学べました！\nでも私可愛いゲームばかりしてツインスティックシューティングゲームはほとんど遊んでいないので悲劇なスコアを取りましたw\nアニマロイドガール\r白髪が正義。\n猫耳が正義。\n可愛いが正義。\nそしてこの三つを集めている偉大なゲームはこの「アニマロイドガール」です！\n可愛い可愛い可愛い可愛い可愛い可愛い可愛い可愛い可愛い可愛い可愛い可愛い可愛い可愛い可愛い可愛い可愛い可愛い可愛い可愛い可愛い可愛い！！！\n私はアクリルを買うため入場時間前に浜松町駅に到着しましたが初めてので道に迷った。\nだってアップルマップは会場のビルが書いてないのです。\nビル各層のエレベーターの位置も違いので探す難い。\n最後やはり予想通り全部なくなった、悲しいですQAQ\nらくがき板\rぶらぶらするときらくがき板を発見しました。\nみんな絵描き上手だな～私も絵師になりたい。\n可愛い絵の中に怖いものが入っているのでちょっとモザイクしました。\nMillion Depth\rこのゲームも気になっているが人が多いのでただ見るだけにしました。\n人が多い過ぎて担当さんも驚きたようですｗ\n「ローグライク」＋「ARPG」のゲームらしいです、武器も自分でDIYしなければなりません。\nこのタイプのゲームはとても気に入っているので早く遊びたいな。\n可愛いPCケース\r最後\rTOKYO GAME SHOW に行ったこともあるがやはり私ならゲームダンジョンの方がもっと好きです。チケットは安いし、人がそんなに多くないし、たくさんゲームを試遊できます。そしてほとんどインディーゲームので個人ゲーム開発者の私にとってとても親切です。さらに私は日本の美少女インディーゲームを応援したいなのですw\n時間があったらまた行きます！！！\n","date":"2025-02-15T18:00:00+09:00","image":"https://image.icysamon.jp/blog/2025/02/tokyo-game-dungeon-01.webp","permalink":"https://blog.icysamon.jp/post/%E6%9D%B1%E4%BA%AC%E3%82%B2%E3%83%BC%E3%83%A0%E3%83%80%E3%83%B3%E3%82%B8%E3%83%A7%E3%83%B3%EF%BC%97/","title":"東京ゲームダンジョン７"},{"content":"今月、家の近くの病院で成人健康診査を受けました。私にとって、日本に定住してから初めての定期健診です。これをきっかけに、日本の医療について多くのことを学びました。\n事前に電話で予約をして病院に行きました。受付の担当者にマイナンバーと診察券を渡し、情報を確認後受診票と問診票を受け取りました。\n受診票は主に保険証や住所の情報を記入する必要があり、問診票にはいくつかの身体状況や生活習慣に関する質問項目が書かれています。でも私は保険証ではなくマイナンバーを使ってそしてその中に記号や番号が書いてないのでマイナポータルアプリを開いて調べなければなりませんでした。\n必要事項の記入を終えた後受付に戻って受診票と問診票を担当者に返しました。そして尿検査、Ｘ線、身長・体重測定、心電図などの検査を受けました。担当者はとても優しいし、私と日本料理の魅力についての話をしました。\n検査を終了後お医者さんと話して日常の飲食を聞きされました。その後待機室に戻って受付の呼び出しを待っていました。私はこの地域の住民なので健診費はたったの５００円でした、信じられないことに、中国よりも安かったです。\n最後に、お医者さんの指示どおり、一週間後に病院に戻って診査結果を受け取りました。今回は別のお医者さんが検査結果を説明してくれましたがとても優しく、責任感が高い先生と思います。\n","date":"2025-02-14T22:15:00+09:00","permalink":"https://blog.icysamon.jp/post/%E5%88%9D%E3%82%81%E3%81%A6%E3%81%AE%E6%88%90%E4%BA%BA%E5%81%A5%E5%BA%B7%E8%A8%BA%E6%9F%BB/","title":"初めての成人健康診査"},{"content":"資源側（CDNなど）の .htaccess に以下の内容を書いてください。\n1 2 3 4 # CORS \u0026lt;IfModule mod_headers.c\u0026gt; Header set Access-Control-Allow-Origin \u0026#34;https://example.com\u0026#34; \u0026lt;/IfModule\u0026gt; https://example.com は資源を求めている側である。\n例えば example.com が cdn.example.com から資源を要求している場合、cdn.example.com 側にさっきの .htaccess を設定しなければならない。\n二つ以上のドメイン\r1 2 3 4 5 \u0026lt;IfModule mod_headers.c\u0026gt; SetEnvIf Origin \u0026#34;http(s)?://(www\\.)?(domain1.com|domain2.com|domain3.com)$\u0026#34; AccessControlAllowOrigin=$0$1 Header add Access-Control-Allow-Origin %{AccessControlAllowOrigin}e env=AccessControlAllowOrigin Header set Access-Control-Allow-Credentials true \u0026lt;/IfModule\u0026gt; ","date":"2025-02-12T11:09:00+09:00","permalink":"https://blog.icysamon.jp/post/.htaccess-%E3%81%A7-access-control-allow-origin-%E3%82%92%E8%A8%AD%E5%AE%9A%E3%81%99%E3%82%8B/","title":".htaccess で Access-Control-Allow-Origin を設定する"},{"content":"ごちそうさまでした😋\n","date":"2025-02-02T23:00:00+09:00","image":"https://image.icysamon.jp/blog/2025/02/food-01.webp","permalink":"https://blog.icysamon.jp/post/%E7%A7%8B%E8%91%89%E5%8E%9F%E3%81%A8%E6%8A%B9%E8%8C%B6%E3%81%A8%E3%82%B9%E3%82%B7%E3%83%AD%E3%83%BC%E3%81%A8%E5%A4%A7%E9%98%AA%E7%84%BC/","title":"秋葉原と抹茶とスシローと大阪焼"},{"content":"CMakeLists.txt\r以下のコードを追加してください。\n1 2 # serial port pico_enable_stdio_usb(project_name 1) # stdio_usb を有効化する 初期化\r最初で stdio.h をインクルードしてください。\n1 #include \u0026#34;stdio.h\u0026#34; そしてプロジェクトのメイン関数で以下のコードを追加してください。\n1 stdio_init_all(); // stdio_usb サポートを有効化する 出力\rプリント関数でデータを出力する。\n1 printf(\u0026#34;hello world!\\n\u0026#34;); ","date":"2025-02-01T21:38:00+09:00","permalink":"https://blog.icysamon.jp/post/raspberry-pi-pico-usb-%E3%82%B7%E3%83%AA%E3%82%A2%E3%83%AB%E3%81%A7%E9%80%9A%E4%BF%A1%E3%81%99%E3%82%8Bc-sdk/","title":"Raspberry Pi Pico - USB シリアルで通信する（C SDK）"},{"content":"事前準備\rSFTP 対応のレンタルサーバー Windows 11 PC Winftp をダウンロード\rhttps://winfsp.dev/rel\nRcloneをダウンロード\rhttps://rclone.org/downloads\nインストール後\n1 rclone --version で状態を確認してください。\nRclone Config ファイルの設定\r設定モードに入る\r1 rclone config を入力してください。\nn で New remote を選択してください。\nSSH/SFTPを選択してください。そしてサーバーのホストやパスワード／キーやなど基本情報を設定してください。\n設定ファイルの場所を探す\r1 rclone config paths 参考のため、私の設定ファイルを用意します。\n1 2 3 4 5 6 7 8 9 [Drive] type = sftp host = example.sakura.ne.jp user = nekosama pass = password use_insecure_cipher = true shell_type = unix md5sum_command = md5 -r sha1sum_command = sha1 -r ドライブをマウントする\r.bat ファイルを作成して、以下の内容を入力してください。\n1 2 3 4 5 rclone mount Drive:/home/user/your_file Z: ^ --cache-dir %LocalAppData%\\rcloneLocalAppData ^ --vfs-cache-mode writes ^ --volname \u0026#34;Drive Name\u0026#34; ^ --buffer-size 512M Drive:/home/user/your_file について\rDrive : さっき作成した remote の名前 :/home/user/your_file : 指定したいファイル位置（省略可） cache-dir\rrclone がキャッシュに使用するディレクトリを指定します。（省略可）\nvfs-cache-mode\rキャッシュモード（write がおすすめ）\n詳しい内容はこちらで確認してください。\nvolname\rドライブの名前（省略可）\nbuffer-size\rファイル転送を高速化するためのバッファ。（省略可）\nマウント\r最後に.batファイルを実行してドライブが出てきます。\n","date":"2024-12-17T20:46:00+09:00","permalink":"https://blog.icysamon.jp/post/%E3%83%AC%E3%83%B3%E3%82%BF%E3%83%AB%E3%82%B5%E3%83%BC%E3%83%90%E3%83%BC%E3%82%92%E3%82%AF%E3%83%A9%E3%82%A6%E3%83%89%E3%83%89%E3%83%A9%E3%82%A4%E3%83%96%E3%81%AB%E3%81%99%E3%82%8B/","title":"レンタルサーバーをクラウドドライブにする"},{"content":"うちの AnkerMake M5C のフィラメントが出てこないので今日フィラメントの修復作業をしました。（実はもう三回目の修復作業です。長い時間使えないならフィラメントを切断される問題がありそうです、でも私使ったフィラメントは非公式ので…そのせいかもしれません。）\n\u0026#x26a0;\u0026#xfe0f; 安全のため解体前に必ず電源線を抜いてください。\n最初はこの四つのネジを出してください。\n内部の様子は大体このようです。\nつぎはファンと台座をエクストルーダから離してください。\nそしてエクストルーダ背面のネジを出してください。\nこのようになります、配線の接続配置をわすれないでください、もし違い場合があるならメモをするのはおすすめです。\n黒い基板下部分二つ銀色のネジを緩めて、ホットエンド部分を出してください。\n緑の外殻をホットエンドから抜いてください。\nフィラメントがノズルの中に嚙み合ったのでピンセットで抜きました。\n中身部分をもとの姿にして、フィラメントをゆっくり入れながら側面で状態を確認しよう。もしフィラメントがまだ上部分の輸送線の中に残る場合があったら反対側でフィラメントを入れて残った部分をもと入り口から押し出すのはおすすめです。\n","date":"2024-12-12T21:49:00+09:00","permalink":"https://blog.icysamon.jp/post/ankermake-m5c-%E3%82%92%E8%A7%A3%E4%BD%93%E3%81%97%E3%81%A6%E3%83%95%E3%82%A3%E3%83%A9%E3%83%A1%E3%83%B3%E3%83%88%E3%81%8C%E6%8A%BC%E3%81%97%E5%87%BA%E3%81%9B%E3%81%9A%E3%81%AE%E5%95%8F%E9%A1%8C%E3%82%92%E4%BF%AE%E5%BE%A9%E3%81%99%E3%82%8B/","title":"AnkerMake M5C を解体してフィラメントが押し出せずの問題を修復する"},{"content":"DHT20 仕様\r入力電圧：2.2V ~ 5V DC 精度：温度±0.5℃、湿度±3% インターフェース定義\rピン（左から右） ネーム 1 VDD 2 SDA 3 GND 4 SCL Raspberry Pi Pico と DHT20 の接続\r二つの抵抗どちっも 4K7R である。\nコード\rThonny を使う場合、正常に実行のためコード中の日本語文字をすべて消してください。または最後のGitHubリンクで英語版をダウンロードしてください。\ndht20.py\r1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 from machine import Pin, I2C import time cmd = bytearray(b\u0026#39;\\xAC\\x33\\x00\u0026#39;) # 測定コマンド i2c_address = 0x38 # I2Cアドレス humidity_data = 0.00 # 湿度データ temperature_data = 0.00 # 温度データ json_data = \u0026#34; \u0026#34; # JSON型温湿度データ # DHT20温湿度センサの初期化 def init(SCL = Pin(21), SDA = Pin(20), FREQ = 10000): global i2c buff = bytearray(7) # 受信データ # I2C通信の設定 i2c = I2C(0, scl = SCL, sda = SDA, freq = FREQ) i2c.writeto(i2c_address, cmd, True) time.sleep_ms(100) i2c.readfrom_into(i2c_address, buff, True) time.sleep_ms(100) # 出荷検査 if (buff[0] \u0026amp; 0x18) == 0x18: print(\u0026#39;DTH20初期化成功\u0026#39;) else: print(\u0026#39;DTH20初期化失敗\u0026#39;) # 測定データの受信と分析 def get_data(): global humidity_data global temperature_data buff = bytearray(7) # 受信データ # 測定命令発信とデータ受信 while True: i2c.writeto(i2c_address, cmd, True) time.sleep_ms(100) i2c.readfrom_into(i2c_address, buff, True) time.sleep_ms(100) # データの転送を確認する if not (buff[0] | 0x7F) != 0x7F or buff[0] == 0x00: break # データの分析 humidity_data_temp = (buff[1] \u0026lt;\u0026lt; 12) | (buff[2] \u0026lt;\u0026lt; 4) | ((buff[3] \u0026gt;\u0026gt; 4) \u0026amp; 0x0f) temperature_data_temp = ((buff[3] \u0026amp; 0x0f) \u0026lt;\u0026lt; 16) | (buff[4] \u0026lt;\u0026lt; 8) | (buff[5]) humidity_data = humidity_data_temp / 1048576 * 100 temperature_data = temperature_data_temp / 1048576 * 200 - 50 # 小数点以下２桁のデータを表示する humidity_data = round(humidity_data, 2) temperature_data = round(temperature_data, 2) # 温湿度データをJSON形式に変更する def to_json(): global json_data json_data = \u0026#34;{\\\u0026#34;temperature\\\u0026#34;: \u0026#34; + (\u0026#39;%.2f\u0026#39; % temperature_data) + \\ \u0026#34;, \\\u0026#34;humidity\\\u0026#34;: \u0026#34; + (\u0026#39;%.2f\u0026#39; % humidity_data) + \\ \u0026#34;}\u0026#34; return json_data main.py\r1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 from machine import Pin import time, dht20 led = Pin(\u0026#34;LED\u0026#34;, Pin.OUT) dht20.init() time.sleep_ms(100) while True: led.toggle() dht20.get_data() print(dht20.to_json()) print(dht20.temperature_data) print(dht20.humidity_data) time.sleep(3) リポジトリ\rhttps://github.com/icysamon/DHT20\n","date":"2024-11-28T11:01:00+09:00","permalink":"https://blog.icysamon.jp/post/raspberry-pi-pico-%E3%81%A7%E6%B8%A9%E6%B9%BF%E5%BA%A6%E3%82%BB%E3%83%B3%E3%82%B5%E3%83%BC-dht20-%E3%82%92%E4%BD%BF%E3%81%86/","title":"Raspberry Pi Pico で温湿度センサー DHT20 を使う"},{"content":"事前準備\rRaspberry Pi Pico W / WH Windows 11 PC USB 線 Python 3.9 をインストール\r現時点（2024年）は Python3.9 がおすすめです。\nVisual Studio Code をインストール\rhttps://code.visualstudio.com/\nVisual Studio Code の拡張機能をインストール\r以下の拡張機能をインストールしてください。\nC/C++（開発元：Microsoft）\rCMake（開発元：twxs）\rRaspberry Pi Pico（開発元：Raspberry Pi）\rPython（開発元：Microsoft）\rRaspberry Pi Picoドライバーのインストール\rZadig を PC にインストール\rhttps://zadig.akeo.ie\nRaspberry Pi Pico 基板のリセット\r別のプロジェクトは既にインストールされた場合、基板のリセットが必要です。\n基板の白いボタンを押しながらUSB線でPCと繋げて自動的にUSBマスストレージデバイスとしてマウントされます。[1]\nそして flash_nuke.uf2 ファイルをダウンロードし、基板のドライブに置いてください。その後基板が自動的にリセットします。\nリセット後基板とPCの接続を解除して [1] の操作を繰り返ししてください。\nドライバーをインストール\rOptions をクリックして List All Devices を有効し、RP2 Boot (Interface 1) を選択してください。\n\u0026#x26a0;\u0026#xfe0f; 必ず Interface 0 ではなく Interface 1 を選択してください、Interface 0 にインストールしたら基板の接続機能は必ず壊されます。\nそして WinUSB を選択し基板へインストールしてください。\nインストール後基板とPCの接続を解除して [1] の操作を繰り返ししてください。\n新しいプロジェクト\rVisual Studio Code 左側のアクティビティバーで Raspberry Pi Pico Project をクリックして New C/C++ Project を開けてください。\nBasic Settings の Board type で Pico W を選択してください。\nBoard type 左側の Example ボタンを押して blink というプロジェクトを選択してください。\nそして Create ボタンを押して新しいプロジェクトを作ってください。（初めての場合長い時間が掛かります）\nSDK Version の変更（不必要）\r個人的には SDK version 2.0 を使うと未知な不具合が発生した場合があるので SDK version 1.5.1 に変更するのはおすすめです。\n更新：システムをリセット後正常になりました、多分私の問題です\nプロジェクトの CMakeList.txt を開けてすべて sdkVersion 2.0.0 と picotoolVersion 2.0.0 を sdkVersion 1.5.1 と picotoolVersion 1.5.1 に変更してください。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 # == DO NOT EDIT THE FOLLOWING LINES for the Raspberry Pi Pico VS Code Extension to work == if(WIN32) set(USERHOME $ENV{USERPROFILE}) else() set(USERHOME $ENV{HOME}) endif() set(sdkVersion 1.5.1) set(toolchainVersion 13_2_Rel1) set(picotoolVersion 1.5.1) set(picoVscode ${USERHOME}/.pico-sdk/cmake/pico-vscode.cmake) if (EXISTS ${picoVscode}) include(${picoVscode}) endif() # ==================================================================================== ＊SDK Version 1.5.1 はインストールされていない場合新しいプロジェクトを作って SDK version で v1.5.1 を選択してください。\nプロジェクトのコンパイル\rVisual Studio Code 右下の Compile ボタンを押してプロジェクトをコンパイルしてください。\nプロジェクトを実行する\rプロジェクトを実行するには二つの方法があります。\n方法１\rVisual Studio Code 右下の Run ボタンを押してプロジェクトを実行してください。\n方法２\r.uf2 ファイルを基板のストレージに置いてください、その後自動的に実行します。 ","date":"2024-11-26T11:53:00+09:00","permalink":"https://blog.icysamon.jp/post/windows11-%E3%81%A7-raspberry-pi-pico-%E3%81%AE-c/c-%E9%96%8B%E7%99%BA%E7%92%B0%E5%A2%83%E3%82%92%E6%A7%8B%E7%AF%89%E3%81%99%E3%82%8B/","title":"Windows11 で Raspberry Pi Pico の C/C++ 開発環境を構築する"},{"content":"解決方法\rコントロールパネルへ移動してください。 ネットワークと共用センターをクリックしてください。 アダプターの設定の変更をクリックしてください。 現在使っているネットワークアダプターを右クリックしてプロパティを選択してください。 Realtek LightWeigh Filter (NDIS6.40) を無効化してください。 ","date":"2024-11-26T10:14:00+09:00","permalink":"https://blog.icysamon.jp/post/%E3%83%96%E3%83%AB%E3%83%BC%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3-driver_irql_not_less_or_equalrtf64x64.sys-failed/","title":"ブルースクリーン - DRIVER_IRQL_NOT_LESS_OR_EQUAL（rtf64x64.sys failed）"},{"content":"テーマの functions.php に以下のコードを追加してください。\n1 2 3 4 5 6 7 8 9 10 11 12 // Hide the google site kit menu function hide_plugin() { remove_menu_page(\u0026#39;googlesitekit-dashboard\u0026#39;); remove_submenu_page(\u0026#39;googlesitekit-dashboard\u0026#39;, \u0026#39;googlesitekit-splash\u0026#39;); } add_action(\u0026#39;admin_menu\u0026#39;, \u0026#39;hide_plugin\u0026#39;, 100); // remove tool bar item function remove_toolbar_node($wp_admin_bar) { $wp_admin_bar-\u0026gt;remove_menu(\u0026#34;google-site-kit\u0026#34;); } add_action(\u0026#34;admin_bar_menu\u0026#34;, \u0026#34;remove_toolbar_node\u0026#34;, 100); ","date":"2024-11-25T18:57:00+09:00","permalink":"https://blog.icysamon.jp/post/wordpress-%E7%AE%A1%E7%90%86%E8%80%85%E3%83%A1%E3%83%8B%E3%83%A5%E3%83%BC%E3%81%8B%E3%82%89-google-site-kit-%E3%82%92%E9%9A%A0%E3%82%8C%E3%82%8B/","title":"WordPress - 管理者メニューから Google Site Kit を隠れる"},{"content":" 形式 例 ナ形容詞辞書形 元気だ ナ形容詞ない形 元気では ナ形容詞て形 元気で ナ形容詞た形 元気だった ナ形容詞ば形 元気ならば ナ形容詞語幹 元気 ","date":"2024-11-11T20:46:00+09:00","permalink":"https://blog.icysamon.jp/post/%E3%83%8A%E5%BD%A2%E5%AE%B9%E8%A9%9E/","title":"ナ形容詞"},{"content":" 形式 例 イ形容詞辞書形 暑い イ形容詞ない形 暑く イ形容詞て形 暑くて イ形容詞た形 暑かった イ形容詞ば形 暑ければ ","date":"2024-11-11T20:43:00+09:00","permalink":"https://blog.icysamon.jp/post/%E3%82%A4%E5%BD%A2%E5%AE%B9%E8%A9%9E/","title":"イ形容詞"},{"content":" 形式 例 五段動詞（動詞１） 行く 一段動詞（動詞２） 食べる サ変動詞／カ変動詞（動詞３） する、勉強する／来る 動詞辞書形 食べる、行く 動詞ます形 食べ、行き 動詞て形 食べて、行って 動詞ない形 食べ、行か 動詞ている形 食べている、行っている 動詞た形 食べた、行った 動詞ば形） 食べれば、行けば 動詞意向形 食べよう、行こう 動詞可能形 食べられる、行ける 動詞使役形 食べさせる、行かせる 動詞受身形 食べられる、行かれる 動詞命令形 食べろ、行け ","date":"2024-11-11T20:39:00+09:00","permalink":"https://blog.icysamon.jp/post/%E5%8B%95%E8%A9%9E/","title":"動詞"},{"content":"仕様\r動作電圧：3.3 ~ 6 V 動作速度：0.12 秒 / 60 度 回転範囲：約 -90 ~ 90 度 温度範囲：0 ºC – 55 ºC 回路接続\rSG-90 Raspberry Pi Pico オレンジ色線 GP0 （コードによって） 赤い色線 VBUS（5V） 茶色線 GND PWM制御\r角度 パルス幅 デューティー比（パルス幅 / 周期） -90°（左） 0.5ms 0.5ms / 20ms 0°（中央） 1.45ms 1.45ms / 20ms 90°（右） 2.4ms 2.4ms / 20ms コード\r1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 from machine import Pin, PWM import time duty_max = 65025 deg_min = 0.025 # -90 deg_middle = 0.0725 # 0 deg_max = 0.12 # 90 # init def init(pin_pwm = 0, freq = 50): global servo servo = PWM(Pin(pin_pwm)) servo.freq(freq) # example function def example(interval = 3): servo.duty_u16(round(duty_max * deg_min)) time.sleep(interval) servo.duty_u16(round(duty_max * deg_middle)) time.sleep(interval) servo.duty_u16(round(duty_max * deg_max)) time.sleep(interval) パラメータ\rduty_max\r最大のデューティ値（100%）である。\n最大値 65025 についてこちらを参考してください。\ndeg_min\r-90° ときのデューティー比である。\ndeg_middle\r0° ときのデューティー比である。\ndeg_max\r90° ときのデューティー比である。\n関数\rinit(pin_pwm = 0, freq = 50)\rピンと周波数を配置するための初期化関数である。\npin_pwm：PWM 信号線と繋がっているのピンである。 freq：周波数、ここにはデータシートによって 50Hz に設定する。 example(interval = 3)\rテスト関数である。-90° -\u0026gt; 0° -\u0026gt; 90° の間にループ制御する。\ninterval：回転間隔。 リポジトリ\rGitHub\n","date":"2024-10-27T21:31:00+09:00","permalink":"https://blog.icysamon.jp/post/raspberry-pi-pico-%E3%81%A7%E3%82%B5%E3%83%BC%E3%83%9C%E3%83%A2%E3%83%BC%E3%82%BF%E3%83%BC-sg-90-%E3%82%92%E5%88%B6%E5%BE%A1%E3%81%99%E3%82%8B/","title":"Raspberry Pi Pico でサーボモーター SG-90 を制御する"},{"content":" 大文字 小文字 英語 日本語 Α α alpha アルファ Β β beta ベータ Γ γ gamma ガンマ Δ δ delta デルタ Ε ε epsilon エプシロン Ζ ζ zeta ゼータ Η η eta エータ；イタ Θ θ theta シータ Ι ι iota イオータ Κ κ kappa カッパ Λ λ lambda ラムダ Μ μ mu ミュー Ξ ξ xi クシー Ο ο omicron オミクロン Π π pi パイ Ρ ρ rho ロー Σ σ sigma シグマ Τ τ tau タウ Υ υ upsilon イプシロン Φ φ phi フィー Χ χ chi キー Ψ ψ psi プシー Ω ω omega オメガ ","date":"2024-10-26T19:55:00+09:00","permalink":"https://blog.icysamon.jp/post/%E3%82%AE%E3%83%AA%E3%82%B7%E3%83%A3%E6%96%87%E5%AD%97%E3%81%AE%E8%AA%AD%E3%81%BF%E6%96%B9/","title":"ギリシャ文字の読み方"},{"content":" 記号 読み方 $\\subset$ 真部分集合、含む、含まれる $\\supset$ 真部分集合を元として含む $\\cup$ 又は、合併集合、和集合 $\\cap$ 且つ、共通集合、積集合 $\\in$ 属する $\\ni$ 元として含む ","date":"2024-10-25T19:06:00+09:00","permalink":"https://blog.icysamon.jp/post/%E9%9B%86%E5%90%88%E7%AF%84%E5%9B%B2%E8%A8%98%E5%8F%B7%E3%81%AE%E8%AA%AD%E3%81%BF%E6%96%B9/","title":"集合範囲記号の読み方"},{"content":"アマゾンの検索結果が表示されたリンクの後ろに \u0026amp;emi=AN1VRQENFRJN5 を掛けてください。\n","date":"2024-10-21T11:03:00+09:00","permalink":"https://blog.icysamon.jp/post/%E3%82%A2%E3%83%9E%E3%82%BE%E3%83%B3%E3%81%AE%E6%A4%9C%E7%B4%A2%E7%B5%90%E6%9E%9C%E3%82%92-amazon.co.jp-%E3%81%AE%E3%81%BF%E3%81%AB%E3%81%99%E3%82%8B/","title":"アマゾンの検索結果を amazon.co.jp のみにする"},{"content":"wordpress のブロックテーマは直観的にウェブサイトを編集することができるのでとても便利であるが、カスタマイズ部分が少ない欠点がある。\nこのときにはテーマの functions.php を配置して以下のようなカスタムスタイルを追加ことができる。\nコード\r1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 function themeslug_register_block_styles() { register_block_style( \u0026#39;core/group\u0026#39;, array( \u0026#39;name\u0026#39; =\u0026gt; \u0026#39;default\u0026#39;, \u0026#39;label\u0026#39; =\u0026gt; __( \u0026#39;Default\u0026#39;, \u0026#39;themeslug\u0026#39; ), \u0026#39;is_default\u0026#39; =\u0026gt; true, \u0026#39;inline_style\u0026#39; =\u0026gt; \u0026#39;.wp-block-group.is-style-default {}\u0026#39; ) ); register_block_style( \u0026#39;core/group\u0026#39;, array( \u0026#39;name\u0026#39; =\u0026gt; \u0026#39;widget\u0026#39;, \u0026#39;label\u0026#39; =\u0026gt; __( \u0026#39;Widget\u0026#39;, \u0026#39;themeslug\u0026#39; ), \u0026#39;inline_style\u0026#39; =\u0026gt; \u0026#39;.wp-block-group.is-style-widget { background-color: #faf0e6; border-radius: 25px; }\u0026#39; ) ); } add_action( \u0026#39;init\u0026#39;, \u0026#39;themeslug_register_block_styles\u0026#39; ); コードの分析\r最初には themeslug_register_block_styles() という関数を作ってください、他の名前も大丈夫。そしてデフォルトのスタイルを設定してください。\n1 2 3 4 5 6 register_block_style( \u0026#39;core/group\u0026#39;, array( \u0026#39;name\u0026#39; =\u0026gt; \u0026#39;default\u0026#39;, \u0026#39;label\u0026#39; =\u0026gt; __( \u0026#39;Default\u0026#39;, \u0026#39;themeslug\u0026#39; ), \u0026#39;is_default\u0026#39; =\u0026gt; true, \u0026#39;inline_style\u0026#39; =\u0026gt; \u0026#39;.wp-block-group.is-style-default {}\u0026#39; ) ); 次はカスタムスタイルを作ってください。\n1 2 3 4 5 6 7 8 register_block_style( \u0026#39;core/group\u0026#39;, array( \u0026#39;name\u0026#39; =\u0026gt; \u0026#39;widget\u0026#39;, \u0026#39;label\u0026#39; =\u0026gt; __( \u0026#39;Widget\u0026#39;, \u0026#39;themeslug\u0026#39; ), \u0026#39;inline_style\u0026#39; =\u0026gt; \u0026#39;.wp-block-group.is-style-widget { background-color: #faf0e6; border-radius: 25px; }\u0026#39; ) ); name はカスタムスタイルの名前、そして inline style はカスタムスCSSの設定場所である。ここはグループというブロックをカスタムするので css には .wp-block-group とする。\nそしてスタイル名は widget ので後ろに .is-style-widget とする。\n最後には add_action() で作った関数を実行する。\n1 add_action( \u0026#39;init\u0026#39;, \u0026#39;themeslug_register_block_styles\u0026#39; ); ","date":"2024-10-20T22:28:00+09:00","permalink":"https://blog.icysamon.jp/post/wordpress-%E3%82%AB%E3%82%B9%E3%82%BF%E3%83%A0%E3%82%B9%E3%82%BF%E3%82%A4%E3%83%AB%E3%82%92%E4%BD%9C%E3%82%8B/","title":"WordPress - カスタムスタイルを作る"},{"content":"NT東京\r今日科学技術館に開催したNT東京に行ってきた。\n江戸城、参ります！\nやっと着いた。\n会場に入った後目に映るのはロボットバンド。\n自作音源とMIDIキーボードもありそう。\nC#で作ったアンドロイドとハードウェアの通信アプリ。C#でアンドロイドアプリの開発もできることは初めて知ってた。\n深層学習に基づくカメラ認識のロボット操作。\nこれはハードディスクドライブかな。日本語を上手く喋らないのでどのために作ったのは聞かなかった、ちょっと残念。でも面白そう。\nやばいものを作ったらしいｗ。\nARで現実に影響を与えられる球形ロボット。\n秋葉原\rせっかく来たんだから、秋葉原も寄ってみようかと思ってやはり来た。\nマクドナルドの新品を食べた。\nアトレ秋葉原のガルクライベント。でも入場制限のこととて、何も買わなかった。\n","date":"2024-09-07T21:02:00+09:00","image":"https://image.icysamon.jp/blog/2024/09/nt-tokyo-04.webp","permalink":"https://blog.icysamon.jp/post/nt%E6%9D%B1%E4%BA%AC%E3%81%AB%E8%A1%8C%E3%81%A3%E3%81%A6%E3%81%8D%E3%81%9F/","title":"NT東京に行ってきた"},{"content":" 1 2 3 4 5 6 7 8 9 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;HEAD\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;?php echo \u0026#39;\u0026lt;p\u0026gt;Hello World\u0026lt;/p\u0026gt;\u0026#39;; ?\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; ","date":"2024-08-01T23:34:00+09:00","permalink":"https://blog.icysamon.jp/post/php-hello-world/","title":"PHP - Hello World"},{"content":"最初にはファイルを MainActivity と同じパッケージ環境に連携してください。\n1 package com.example.name そしてクラスを作って AppCompatActivity タイプのコンストラクタ引数を与えてください。\n1 class Test(private val appCompatActivity: AppCompatActivity) {} 最後に MainActivity でクラスのインスタンスを作って this を与えてください。\n1 private val test = Test(this) ","date":"2024-07-31T13:27:00+09:00","permalink":"https://blog.icysamon.jp/post/kotlin-%E4%BB%96%E3%81%AE%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%A7-mainactivity-%E3%81%AE-api-%E3%82%92%E4%BD%BF%E3%81%86/","title":"Kotlin - 他のファイルで MainActivity の API を使う"},{"content":"拡張機能 \u0026gt; 設定（右上の省略記号） \u0026gt; 表示 \u0026gt; 推奨をオフしてください。\n","date":"2024-07-30T21:32:00+09:00","permalink":"https://blog.icysamon.jp/post/vs-code-%E6%8B%A1%E5%BC%B5%E6%A9%9F%E8%83%BD%E3%81%AE%E6%8E%A8%E5%A5%A8%E3%82%92%E3%82%AA%E3%83%95%E3%81%99%E3%82%8B/","title":"VS Code 拡張機能の推奨をオフする"},{"content":"前言\rこの操作をする前に Bluetooth 権限を取得する必要がある。\nKotlin - アプリの権限を取得する\nstartForResult ランチャーを作る\r1 2 3 4 5 6 7 8 9 private val startForResult = registerForActivityResult( ActivityResultContracts.StartActivityForResult() ) { result -\u0026gt; if (result.resultCode == Activity.RESULT_OK) { val intent: Intent? = result.data Toast.makeText(this, \u0026#34;RESULT_OK\u0026#34;, Toast.LENGTH_LONG).show() // Handle the Intent } } Bluetooth の初期化\r1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 private fun bluetoothInit() { // bluetooth init val bluetoothManager: BluetoothManager = getSystemService(BluetoothManager::class.java) val bluetoothAdapter: BluetoothAdapter? = bluetoothManager.adapter // check bluetoothAdapter if (bluetoothAdapter == null) { // Device doesn\u0026#39;t support Bluetooth Toast.makeText(this, \u0026#34;Device doesn\u0026#39;t support Bluetooth.\u0026#34;, Toast.LENGTH_LONG).show() } // get bluetooth if (bluetoothAdapter?.isEnabled == false) { Toast.makeText(this, \u0026#34;bluetoothAdapter is not enable\u0026#34;, Toast.LENGTH_LONG).show() // Bluetooth を有効する val intent = Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE) startForResult.launch(intent) } } ","date":"2024-07-30T18:31:00+09:00","permalink":"https://blog.icysamon.jp/post/kotlin-bluetooth-%E3%82%92%E3%82%AA%E3%83%B3%E3%81%AB%E3%81%99%E3%82%8B/","title":"Kotlin - Bluetooth をオンにする"},{"content":"ここでは BLUETOOTH_CONNECT 権限を例にする。\n権限ランチャーを作る\r1 2 3 4 5 6 7 8 9 10 11 12 13 // 権限ランチャー private val requestPermissionLauncher = registerForActivityResult( ActivityResultContracts.RequestPermission() ) { isGranted: Boolean -\u0026gt; if (isGranted) { // 権限を取得できた Log.i(\u0026#34;Permission: \u0026#34;, \u0026#34;Granted\u0026#34;) } else { // 権限を取得できなかった Log.i(\u0026#34;Permission: \u0026#34;, \u0026#34;Denied\u0026#34;) } } 権限をリクエスト\r1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 private fun requestBluetoothPermission() { when { ContextCompat.checkSelfPermission( this, Manifest.permission.BLUETOOTH_CONNECT ) == PackageManager.PERMISSION_GRANTED -\u0026gt; { bluetoothInit() } ActivityCompat.shouldShowRequestPermissionRationale( this, Manifest.permission.BLUETOOTH_CONNECT ) -\u0026gt; { Toast.makeText(this, \u0026#34;Bluetooth 権限は必要にゃ。\u0026#34;, Toast.LENGTH_LONG).show() requestPermissionLauncher.launch( Manifest.permission.BLUETOOTH_CONNECT ) } else -\u0026gt; { Toast.makeText(this, \u0026#34;Bluetooth 権限は必要にゃ。\u0026#34;, Toast.LENGTH_LONG).show() requestPermissionLauncher.launch( Manifest.permission.BLUETOOTH_CONNECT ) } } } ","date":"2024-07-30T18:10:00+09:00","permalink":"https://blog.icysamon.jp/post/kotlin-%E3%82%A2%E3%83%97%E3%83%AA%E3%81%AE%E6%A8%A9%E9%99%90%E3%82%92%E5%8F%96%E5%BE%97%E3%81%99%E3%82%8B/","title":"Kotlin - アプリの権限を取得する"},{"content":"設定 \u0026gt; デバイス情報 \u0026gt; ビルド番号を7回連続タップしてください。\n","date":"2024-07-28T23:26:00+09:00","permalink":"https://blog.icysamon.jp/post/pixel-%E3%81%AE%E9%96%8B%E7%99%BA%E8%80%85%E3%83%A2%E3%83%BC%E3%83%89%E3%82%92%E6%9C%89%E5%8A%B9%E5%8C%96%E3%81%99%E3%82%8B/","title":"Pixel の開発者モードを有効化する"},{"content":"約91万人がいると聞かされた、凄いな～\n久しぶりの花火大会！\n","date":"2024-07-27T23:00:00+09:00","image":"https://image.icysamon.jp/blog/2024/07/sky-tree-tokyo.webp","permalink":"https://blog.icysamon.jp/post/%E5%88%9D%E3%82%81%E3%81%A6%E9%9A%85%E7%94%B0%E5%B7%9D%E8%8A%B1%E7%81%AB%E5%A4%A7%E4%BC%9A%E3%82%92%E8%A6%8B%E3%81%9F/","title":"初めて隅田川花火大会を見た"},{"content":"activity_main.xml に ImageView を追加してください。\nonClick イベント関数に以下を書いてください。\n1 2 3 4 fun onButtonBottomClick(view: View) { val robot = findViewById\u0026lt;ImageView\u0026gt;(R.id.simulation_robot) robot.translationX += 50F } ","date":"2024-07-27T10:29:00+09:00","permalink":"https://blog.icysamon.jp/post/android-studio-%E3%83%9C%E3%82%BF%E3%83%B3%E3%81%A7-view-%E3%81%AE%E4%BD%8D%E7%BD%AE%E3%82%92%E5%A4%89%E6%9B%B4%E3%81%99%E3%82%8B/","title":"Android Studio - ボタンで View の位置を変更する"},{"content":"activity_main にボタンを追加して、Attributes で onClick イベント名前を設定してください。\nそして MainActivity.kt に onClick イベント名前対応のイベント関数を書いてください。\n1 2 3 fun onButtonBottomClick(view: View) { Toast.makeText(this, \u0026#34;ボタンが押された\u0026#34;, Toast.LENGTH_LONG).show() } ボタンを押した後トーストメッセージが出力する。\n","date":"2024-07-26T23:02:00+09:00","permalink":"https://blog.icysamon.jp/post/android-studio-%E3%83%9C%E3%82%BF%E3%83%B3%E3%82%AF%E3%83%AA%E3%83%83%E3%82%AF%E3%82%A4%E3%83%99%E3%83%B3%E3%83%88/","title":"Android Studio - ボタンクリックイベント"},{"content":"Tools \u0026gt; Device Manager を移動して、プラスで Create Virtual Device を選択してください。\nそしてデバイスの選択画面が出る。\n","date":"2024-07-24T18:51:00+09:00","permalink":"https://blog.icysamon.jp/post/android-studio-%E3%82%B7%E3%83%9F%E3%83%A5%E3%83%AC%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%83%87%E3%83%90%E3%82%A4%E3%82%B9%E3%82%92%E8%BF%BD%E5%8A%A0%E3%81%99%E3%82%8B/","title":"Android Studio - シミュレーションデバイスを追加する"},{"content":"ICO ファイルの作成\rImageMagick をダウンロードして、以降のコマンドでPNGファイルを hiDPI 対応の ICO ファイルに変換してください。\n1 magick icon.png -define icon:auto-resize=256,128,64,48,32,16 icon.ico ImageMagick は異なるバージョンに従ってコマンドが異なる場合がある。\nタスクバーアイコンの変更\rタスクバーアイコンを変更するには、Project \u0026gt; Project Settings \u0026gt; Application \u0026gt; Config \u0026gt; Windows Native Icon に移動して、自分のアイコンに変更してください。（右上の Advanced Settings を有効する必要がある）\nファイルアイコンの変更\rrcedit をインストールし、Editor \u0026gt; Editor Settings \u0026gt; Export \u0026gt; Windows に移動してください。そして rcedit エントリのフォルダアイコンをクリックし、 rcedit実行可能ファイルまで移動して選択してください。\nrcedit を Linux および macOS ユーザーが使用するためには WINE をインストールする必要がある。\nこれで、ファイル・アイコンを変更するためのすべてが準備できた。そのためには、エクスポート時にアイコンを指定する必要がある。Project \u0026gt; Export に移動してください。既に Windows デスクトッププリセットを作成している場合、Application \u0026gt; Icon フィールドで ICO 形式のアイコンを選択してください。\n","date":"2024-07-24T12:18:00+09:00","permalink":"https://blog.icysamon.jp/post/godot-windows-%E7%89%88%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%82%A2%E3%82%A4%E3%82%B3%E3%83%B3%E3%82%92%E5%A4%89%E6%9B%B4%E3%81%99%E3%82%8B/","title":"Godot - Windows 版アプリケーションアイコンを変更する"},{"content":"以前書いた方法は少し使うにくいため、新しい方法を見つけた。\nGodot - シーンの切り替え\nコード\r1 get_tree().change_scene_to_file(scene) ","date":"2024-07-22T14:06:00+09:00","permalink":"https://blog.icysamon.jp/post/godot-%E7%B0%A1%E5%8D%98%E3%81%AB%E3%82%B7%E3%83%BC%E3%83%B3%E3%82%92%E5%88%87%E3%82%8A%E6%9B%BF%E3%81%88/","title":"Godot - 簡単にシーンを切り替え"},{"content":"この設定方法は Windows11 Pro ユーザー限りである。\nWindows と R を押して gpedit.msc を 入力し、Enter を押してください。\nそして「コンピューターの構成」＞「管理用テンプレート」＞「Windows コンポーネント」＞「検索」に入ってください。\n「Web 検索を許可しない」と「Web を検索したり [検索] に Web の検索結果を表示したりしない」をダブルクリックして有効化してください。その後パソコンを再起動してください。\n次はまた Windows と R を押して regedit.exe を 入力し、Enter を押してください。\nそして Computer\\HKEY_CURRENT_USER\\Software\\Microsoft\\Windows Windows\\CurrentVersion\\Search に入ってください。\nSearch を右クリックして新規の DWORD ( 32 ビット ) 値を作し、BingSearchEnabled と命名してください。\n最後に Dword をダブルクリックして値のデータを 0 に設定してください。\n設定後ウェブ検索結果はもう消えた。\n","date":"2024-07-08T09:07:00+09:00","permalink":"https://blog.icysamon.jp/post/windows-11-%E3%81%AE%E3%82%A6%E3%82%A7%E3%83%96%E6%A4%9C%E7%B4%A2%E6%A9%9F%E8%83%BD%E3%82%92%E7%84%A1%E5%8A%B9%E5%8C%96%E3%81%99%E3%82%8B/","title":"Windows 11 のウェブ検索機能を無効化する"},{"content":"今日は３Dプリンターでモバイルスタンドを作った！\n長い時間使っていないせいかも「フィラメントが破損もしくは詰まっています。確認してください」と言っちゃった\u0026hellip;\u0026hellip;\nでも少し時間がかかってやっと直した。\nそして最近 X4: Foundations にはまっているので、小学生時代 Freelancer を遊んだ時の感じが戻った、ちょっと懐かしいな。\nほぼ二十年経ったのに、やはり宇宙に目がないやん。\nところで、最近ゲームばかりしてるけど新曲も作っている（大学院受験準備も！）、今回はアニメソン風（・ｗ・）\nでもまだたくさん道があるそうな \u0026hellip;\u0026hellip;\n","date":"2024-07-05T12:15:00+09:00","permalink":"https://blog.icysamon.jp/post/%E5%AE%87%E5%AE%99%E3%81%AB%E7%9B%AE%E3%81%8C%E3%81%AA%E3%81%84%E3%82%84%E3%82%93/","title":"宇宙に目がないやん"},{"content":"本日料理は中華チャーハン。\nでも最初に料理酒を食用油として入れちゃった\u0026hellip;\u0026hellip;\nそしてニンニクや生姜とたまごの投入順序が間違った。\nまた未熟者だ！何十回チャーハン作ったのにこんな凡ミスをしちゃった。\n今回はもうダメと思ったけど完成品は食べられる！\n美味しい！\n","date":"2024-07-01T22:00:00+09:00","image":"https://image.icysamon.jp/blog/2024/07/fried-rice.webp","permalink":"https://blog.icysamon.jp/post/%E9%87%91%E8%89%B2%E3%81%AE%E6%B6%B2%E4%BD%93%E3%81%AA%E3%81%AE%E3%81%AB%E6%B2%B9%E3%81%98%E3%82%83%E3%81%AA%E3%81%84/","title":"金色の液体なのに油じゃない"},{"content":"死んだ魚目ようなサーバー\r実は先日、このサイトは死んだ。\nもう終わったよ！（悲鳴）、使うられないサービスばかりし、広告も多い、問題があったら全部「チャートに連絡して」という。でも俺にとって英語は無理だよ！\n不幸中の幸い、データはどうやら救われた。\n最終 Hostgator を辞めるが決めて、さくらサーバーに変更した。やはりさくらサーバーは使いやすいな。\n本日料理\r今日ネギ豆腐を作った、赤い点はたらこ。\n","date":"2024-06-29T17:57:00+09:00","permalink":"https://blog.icysamon.jp/post/%E3%82%B5%E3%83%BC%E3%83%90%E3%83%BC%E3%83%87%E3%83%BC%E3%82%BF%E6%95%91%E5%87%BA%E5%A4%A7%E4%BD%9C%E6%88%A6/","title":"サーバーデータ救出大作戦"},{"content":"昨晩アマゾンさんが線形代数の教科書を届いた。\n今日から線形代数の勉強をしなければならないな\u0026hellip;\u0026hellip;\nでも数学やはり難しいよな、全然食べれない。\nそして今日、中華料理の作り方でもも肉料理に挑戦した。味はまあまあかな。\n","date":"2024-06-28T12:00:00+09:00","image":"https://image.icysamon.jp/blog/2024/06/cooking-breast-meat.webp","permalink":"https://blog.icysamon.jp/post/%E9%A3%9F%E3%81%B9%E3%82%89%E3%82%8C%E3%81%AA%E3%81%84%E7%B7%9A%E5%BD%A2%E4%BB%A3%E6%95%B0%E3%81%A8%E9%A3%9F%E3%81%B9%E3%82%89%E3%82%8C%E3%82%8B%E9%B6%8F%E3%82%82%E3%82%82%E8%82%89/","title":"食べられない線形代数と食べられる鶏もも肉"},{"content":"毎日普通に過ごし日本語も下手で何を書くのか全然分からんのにやはり日記を書きたいなと思って日記を始めた。\n一応、聖上の恩情はすべて返したので、中国から解放された。新しい生活はここから始まる。\n","date":"2024-06-19T12:00:00+09:00","image":"https://image.icysamon.jp/blog/2024/06/first-diary.webp","permalink":"https://blog.icysamon.jp/post/%E5%88%9D%E3%82%81%E3%81%A6%E3%81%AE%E6%97%A5%E8%A8%98/","title":"初めての日記"},{"content":"最初にはパソコンに SSH key があるかないかを確認してください。\n1 2 cd ~/.ssh ls そしてid_rsa と id_rsa.pub の存在を確認してください。ない場合以下のコマンドで新しい SSH key を作成してください。\n1 ssh-keygen -t rsa -C \u0026#34;xxx@xxx.com\u0026#34; \u0026ldquo;xxx@xxx.com\u0026rdquo; の中に自分の GitHub アカントと連携したメールを書いて、その後三回の確認があるので Enter キーを押し続ければ良い。そして同じファイルで以下のコマンドを入力して SSH key の内容を取得できる。\n1 cat id_rsa.pub 最後にこれをコーピーして GitHub 設定画面の SSH and GPG keys で新しい鍵を作ってコーピーした内容をその中に入力してください。\n","date":"2024-06-17T19:35:00+09:00","permalink":"https://blog.icysamon.jp/post/git-ssh-key-%E3%81%AE%E8%A8%AD%E5%AE%9A/","title":"Git SSH Key の設定"},{"content":"環境設定\r最初には OpenConnect 環境のインストールしてください。\n1 2 sudo apt install openconnect sudo apt install network-manager-openconnect-gnome ネットサービスの再起動\rその後ネットサービスの再起動は必要である。\n1 sudo systemctl restart NetworkManager 接続\rネットワークの設定画面で VPN を追加してください。\nそして Multi-protocol VPN client(openconnect) を選択してください。\nGateway を編集して IPv6 を無効化してください。\n最後に追加ボタンを押して、AnyConnect VPN の登録画面が出来る。\n","date":"2024-06-15T10:38:00+09:00","permalink":"https://blog.icysamon.jp/post/debian-%E3%81%A7-anyconnect-vpn-%E3%82%92%E4%BD%BF%E3%81%86/","title":"Debian で AnyConnect VPN を使う"},{"content":"activity_main.xml\ractivity_main.xml にボタンとテキストを追加し、ID と位置を設定してください。\nMainActivity.kt\rMainActivity.kt の onCreate() に以下のコードを追加してください。\n1 2 3 4 5 6 7 8 val tv : TextView = findViewById(R.id.text) val btn : Button = findViewById(R.id.button) var num = 0 btn.setOnClickListener { num++ tv.text = String.format(getString(R.string.text1), num) } strings.xml\rアンドロイドの開発規範を従うために、strings.xml でテキストを追加してください。\n1 \u0026lt;string name=\u0026#34;text1\u0026#34;\u0026gt;Click: %d\u0026lt;/string\u0026gt; ","date":"2024-04-11T10:15:00+09:00","permalink":"https://blog.icysamon.jp/post/android-studio-%E3%83%9C%E3%82%BF%E3%83%B3%E3%81%A7%E3%83%86%E3%82%AD%E3%82%B9%E3%83%88%E3%82%92%E5%A4%89%E6%9B%B4%E3%81%99%E3%82%8B/","title":"Android Studio - ボタンでテキストを変更する"},{"content":" 1 2 3 4 5 6 7 8 9 from machine import Pin, Timer led = Pin(\u0026#34;LED\u0026#34;, Pin.OUT) timer = Timer() def blink(timer): led.toggle() timer.init(freq = 2.5, mode = Timer.PERIODIC, callback = blink) または\n1 2 3 4 5 6 7 8 from machine import Pin import time led = Pin(\u0026#34;LED\u0026#34;, Pin.OUT) if __name__ == \u0026#34;__main__\u0026#34;: while True: led.toggle() time.sleep(1) ","date":"2024-02-14T14:01:00+09:00","permalink":"https://blog.icysamon.jp/post/raspberry-pi-pico-%E7%82%B9%E7%81%AF/","title":"Raspberry Pi Pico - 点灯"},{"content":"多分 \u0026quot; の前は \\ が必要だと思う。\n1 homeassistant.local -t homeassistant/test -u user -P password -p 1883 -m \u0026#39;{\\\u0026#34;temperature\\\u0026#34;: 23.20}\u0026#39; ","date":"2024-02-08T22:13:00+09:00","permalink":"https://blog.icysamon.jp/post/home-assistant-mosquitto_pub-%E3%81%AE%E3%83%A1%E3%83%83%E3%82%BB%E3%83%BC%E3%82%B8%E8%A8%AD%E5%AE%9A%E3%81%AF%E6%AD%A3%E3%81%97%E3%81%84%E3%81%91%E3%81%A9%E3%83%87%E3%83%BC%E3%82%BF%E3%81%8C%E5%B1%8A%E3%81%8B%E3%81%AA%E3%81%84/","title":"Home Assistant - mosquitto_pub のメッセージ設定は正しいけどデータが届かない"},{"content":"エラーコード\r1 2 3 The following features required to run Godot projects on the Web are missing: Cross Origin Isolation - Check web server configuration (send correct headers) SharedArrayBuffer - Check web server configuration (send correct headers) 解決方法\r.htaccess に以下のコードを追加してください。\n1 2 Header set Cross-Origin-Embedder-Policy \u0026#34;require-corp\u0026#34; Header set Cross-Origin-Opener-Policy \u0026#34;same-origin\u0026#34; ","date":"2024-02-07T23:59:00+09:00","permalink":"https://blog.icysamon.jp/post/godot-%E3%82%A6%E3%82%A7%E3%83%96%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%A0%E3%81%8C%E5%AE%9F%E8%A1%8C%E5%87%BA%E6%9D%A5%E3%81%AA%E3%81%84%E3%82%92%E8%A7%A3%E6%B1%BA%E3%81%99%E3%82%8B/","title":"Godot - ウェブプログラムが実行出来ないを解決する"},{"content":"\nProject Settings → Player → Other Settings → Api Compatibility Level を .Net Framework に変更すれば解決できる。\n","date":"2024-01-01T21:43:00+09:00","permalink":"https://blog.icysamon.jp/post/unity-system.io.ports-%E3%81%8C%E4%BD%BF%E3%81%88%E3%81%AA%E3%81%84/","title":"Unity - System.IO.Ports が使えない"},{"content":"原理図\rモジュールコード\rモジュールを接続場合、ポートのみが重要になる。モジュール中のコードを知る必要がない。モジュールのコードは次の通り。\n1 2 3 module mod_a ( input in1, input in2, output out ); // Module body endmodule インスタンスと接続\rポジションで\r1 mod_a instance1 ( wa, wb, wc ); 名前で\r1 mod_a instance2 ( .out(wc), .in1(wa), .in2(wb) ); 例\r1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 module top_module ( input a, input b, output out ); // Create an instance of \u0026#34;mod_a\u0026#34; named \u0026#34;inst1\u0026#34;, and connect ports by name: mod_a inst1 ( .in1(a), // Port\u0026#34;in1\u0026#34;connects to wire \u0026#34;a\u0026#34; .in2(b),\t// Port \u0026#34;in2\u0026#34; connects to wire \u0026#34;b\u0026#34; .out(out)\t// Port \u0026#34;out\u0026#34; connects to wire \u0026#34;out\u0026#34; // (Note: mod_a\u0026#39;s port \u0026#34;out\u0026#34; is not related to top_module\u0026#39;s wire \u0026#34;out\u0026#34;. // It is simply coincidence that they have the same name) ); /* // Create an instance of \u0026#34;mod_a\u0026#34; named \u0026#34;inst2\u0026#34;, and connect ports by position: mod_a inst2 ( a, b, out );\t// The three wires are connected to ports in1, in2, and out, respectively. */ endmodule ","date":"2023-12-12T15:53:00+09:00","permalink":"https://blog.icysamon.jp/post/verilog-%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%82%BF%E3%83%B3%E3%82%B9%E5%8C%96%E3%81%A8%E3%82%B7%E3%82%B0%E3%83%8A%E3%83%AB%E6%8E%A5%E7%B6%9A/","title":"Verilog - モジュールのインスタンス化とシグナル接続"},{"content":"エックスノア (XNOR) の表示方法\r1 エックスノア (XNOR) の表示方法 エックスノア (XNOR) の真理値表\rA B A XNOR B 0 0 1 0 1 0 1 0 0 1 1 1 例\r1 2 3 4 5 6 7 8 9 10 11 12 13 14 module top_module ( input a, b, c, d, e, output [24:0] out ); wire [24:0] top, bottom; assign top = { {5{a}}, {5{b}}, {5{c}}, {5{d}}, {5{e}} }; assign bottom = {5{a,b,c,d,e}}; assign out = ~top ^ bottom;\t// Bitwise XNOR // This could be done on one line: // assign out = ~{ {5{a}}, {5{b}}, {5{c}}, {5{d}}, {5{e}} } ^ {5{a,b,c,d,e}}; endmodule ","date":"2023-12-10T14:27:00+09:00","permalink":"https://blog.icysamon.jp/post/verilog-%E3%83%99%E3%82%AF%E3%83%88%E3%83%AB%E3%81%AE%E3%82%A8%E3%83%83%E3%82%AF%E3%82%B9%E3%83%8E%E3%82%A2-xnor/","title":"Verilog - ベクトルのエックスノア (XNOR)"},{"content":"ここには8ビットの順序を逆するを例に挙げる。\nfor\r1 2 3 4 5 6 7 8 9 10 11 module top_module( input [7:0] in, output [7:0] out ); always @(*) begin for (int i = 0; i \u0026lt; 8; i++) out[i] = in[8 - i - 1]; end endmodule generate - for\r1 2 3 4 5 6 7 8 9 10 11 12 13 module top_module( input [7:0] in, output [7:0] out ); generate genvar i; for (i = 0; i \u0026lt; 8; i = i + 1) begin: my_block_name assign out[i] = in[8 - i - 1]; end endgenerate endmodule ","date":"2023-12-09T14:21:00+09:00","permalink":"https://blog.icysamon.jp/post/verilog-for-%E3%83%AB%E3%83%BC%E3%83%97/","title":"Verilog - for ループ"},{"content":"原理図\rビット演算子\r1 assign out_or_bitwise = a | b; 論理演算子\r1 assign out_or_logical = a || b; ","date":"2023-12-07T14:44:00+09:00","permalink":"https://blog.icysamon.jp/post/verilog-%E3%83%93%E3%83%83%E3%83%88%E6%BC%94%E7%AE%97%E5%AD%90%E3%81%A8%E8%AB%96%E7%90%86%E6%BC%94%E7%AE%97%E5%AD%90/","title":"Verilog - ビット演算子と論理演算子"},{"content":" 1 2 3 4 5 6 7 8 9 10 `default_nettype none // Disable implicit nets. Reduces some types of bugs. module top_module( input wire [15:0] in, output wire [7:0] out_hi, output wire [7:0] out_lo ); assign out_hi = in[15:8]; assign out_lo = in; endmodule ","date":"2023-12-06T18:32:00+09:00","permalink":"https://blog.icysamon.jp/post/verilog-%E3%83%99%E3%82%AF%E3%83%88%E3%83%AB%E3%81%AE%E5%88%86%E5%89%B2/","title":"Verilog - ベクトルの分割"},{"content":"原理図\rコード\r1 2 3 4 5 6 7 8 9 10 11 module top_module ( input wire [2:0] vec, output wire [2:0] outv, output wire o2, output wire o1, output wire o0 ); // Module body starts after module declaration assign outv = vec; assign {o2, o1, o0} = vec; endmodule ","date":"2023-12-06T14:15:00+09:00","permalink":"https://blog.icysamon.jp/post/verilog-%E3%83%99%E3%82%AF%E3%83%88%E3%83%AB/","title":"Verilog - ベクトル"},{"content":"原理図\rコード\r1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 module top_module ( input p1a, p1b, p1c, p1d, p1e, p1f, output p1y, input p2a, p2b, p2c, p2d, output p2y ); wire p2_1 = p2a\u0026amp;p2b; wire p2_2 = p2c\u0026amp;p2d; wire p1_1 = p1a\u0026amp;p1c\u0026amp;p1b; wire p1_2 = p1f\u0026amp;p1e\u0026amp;p1d; assign p2y = p2_1 | p2_2; assign p1y = p1_1 | p1_2; endmodule シミュレーション結果\r","date":"2023-12-06T13:21:00+09:00","permalink":"https://blog.icysamon.jp/post/verilog-7458%E3%83%81%E3%83%83%E3%83%97/","title":"Verilog - 7458チップ"},{"content":"top.v\r1 2 3 4 5 6 7 8 9 10 11 12 13 14 module top( input i_clk ,input [3:0] i_sw_n ,output o_led_blue ,output o_led_green ,output o_led_orange ,output o_led_red ); assign o_led_blue = ~i_sw_n[3]; assign o_led_green = ~i_sw_n[2]; assign o_led_orange = ~i_sw_n[1]; assign o_led_red = ~i_sw_n[0]; endmodule top_tb.v\r1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 `timescale 1ns / 100ps module top_tb; // 信号を定義 reg r_clk; reg [3:0] r_sw_n; wire w_led_blue; wire w_led_green; wire w_led_orange; wire w_led_red; // 100MHzクロック信号を生成 initial begin r_clk = 0; end always #(5) begin r_clk \u0026lt;= ~r_clk; end // スイッチ信号を生成 initial begin #0 r_sw_n[3:0] = 4\u0026#39;b1111; #100 r_sw_n[3:0] = 4\u0026#39;b1110; #100 r_sw_n[3:0] = 4\u0026#39;b1111; #100 r_sw_n[3:0] = 4\u0026#39;b1101; #100 r_sw_n[3:0] = 4\u0026#39;b1111; #100 r_sw_n[3:0] = 4\u0026#39;b1011; #100 r_sw_n[3:0] = 4\u0026#39;b1111; #100 r_sw_n[3:0] = 4\u0026#39;b0111; #100 r_sw_n[3:0] = 4\u0026#39;b1111; end // top.vを読み出す top top_inst ( .i_clk (r_clk) ,.i_sw_n (r_sw_n) ,.o_led_blue (w_led_blue) ,.o_led_green (w_led_green) ,.o_led_orange (w_led_orange) ,.o_led_red (w_led_red) ); endmodule Sources設定\rシミュレーション結果\r","date":"2023-12-05T14:05:00+09:00","permalink":"https://blog.icysamon.jp/post/verilog-%E7%82%B9%E7%81%AF/","title":"Verilog - 点灯"},{"content":"コード\r1 2 3 4 5 6 7 8 9 10 11 12 13 14 `timescale 1ns / 100ps module tb1; // 100MHz logic clk_100mhz; initial clk_100mhz = 1; always #(5) clk_100mhz = ~clk_100mhz; endmodule 結果\r","date":"2023-12-04T14:06:00+09:00","permalink":"https://blog.icysamon.jp/post/verilog-%E3%82%AF%E3%83%AD%E3%83%83%E3%82%AF%E4%BF%A1%E5%8F%B7/","title":"Verilog - クロック信号"},{"content":"コード\r1 2 3 4 5 6 7 8 9 `timescale 1ns / 100ps module tb1; logic signal; initial signal = 1; endmodule 結果\r","date":"2023-12-04T14:01:00+09:00","permalink":"https://blog.icysamon.jp/post/verilog-%E5%88%9D%E3%82%81%E3%81%A6%E3%81%AE%E3%82%B7%E3%82%B0%E3%83%8A%E3%83%AB/","title":"Verilog - 初めてのシグナル"},{"content":"シグナル源\r1 2 3 4 5 6 signal signal_test func _process(delta): if(true): # ifの中でシグナルの発生条件を設定する signal_test.emit() # シグナル発生 return delta シグナルターゲット\r1 2 3 4 5 6 func _ready(): scene_source.signal_test.connect(on_signal_test) func on_signal_test(): # ここで自分のコードを書く pass ","date":"2023-11-24T16:16:00+09:00","permalink":"https://blog.icysamon.jp/post/godot-%E7%95%B0%E3%81%AA%E3%82%8B%E3%82%B7%E3%83%BC%E3%83%B3%E9%96%93%E3%81%AE%E3%82%B7%E3%82%B0%E3%83%8A%E3%83%AB%E8%A8%AD%E5%AE%9A/","title":"Godot - 異なるシーン間のシグナル設定"},{"content":"トンネル効果\rこの効果は電子が波動であることの立証になる。\nエネルギー障壁の高さ\\(V_1\\)は十分に高くて、電子のエネルギーよりも大きいとする。電子を粒子とすると、電子のはこの障壁を越えることができず、境界ですべて反射されてしまう。とこらが電子を波動と考えると、この障壁中に浸み込んでいくことが可能になる。この効果をトンネル効果という。\nトンネル抜け前後で粒子のエネルギー（波長）は変わらないが確率振幅は減少する。\nトンネル確率 P\r単位時間に単位面積を通過する入射波と透過波の電子数の比と定義する。\n任意の形をとる時には\n$$P\\fallingdotseq A\\cdot exp\\Big(-\\frac{2}{\\hslash}\\sqrt{2m}\\int_{0}^{x_1}\\sqrt{|V(x)-E|}\\cdot dx\\Big) $$\\(E=V_1∕2\\) をとる時には\n$$P=4\\cdot exp \\Big(-\\frac{2m\\sqrt{gh}}{\\hslash}\\cdot W\\Big)$$","date":"2023-11-20T13:23:00+09:00","permalink":"https://blog.icysamon.jp/post/%E3%83%88%E3%83%B3%E3%83%8D%E3%83%AB%E5%8A%B9%E6%9E%9C/","title":"トンネル効果"},{"content":"状態密度関数\r単位体積当たりの単位エネルギー領域に対する電子の量子状態数を状態密度といい。一般には\\(g(E)\\)で表す。\n$$g(E)=\\frac{1}{2π^2} \\Bigg(\\frac{2m}{\\hslash ^2}\\Bigg)^{3/2}E^{1∕2}$$","date":"2023-11-19T12:04:00+09:00","permalink":"https://blog.icysamon.jp/post/%E7%8A%B6%E6%85%8B%E5%AF%86%E5%BA%A6%E9%96%A2%E6%95%B0/","title":"状態密度関数"},{"content":"縮退\rエネルギー固有値が同じて、固有関数が異なる場合を縮退している。\nフェルミエネルギー\rフェルミエネルギーは、絶対零度における電子の取りうる最大のエネルギーである。\n$$E_F(0)=\\frac{\\hslash ^2}{2m}(3\\pi ^2n)^{2/3}$$ここで、\\(n≡N∕L^3\\) は単位体積当たりの電子数、すなわち電子密度である。\n絶対零度ではこのエネルギー値以下のエネルギー準位はすべて電子で満たされていて、それ以上のエネルギー準位は空席である。\nフェルミ温度\r$$T_F≡\\frac{E_F(0)}{k}$$これをフェルミ温度という。ここで、ｋはボルツマン定数である。\nフェルミ速度\r$$v_F=\\Bigg(\\frac{2E_F(0)}{m}\\Bigg)^{1/2}$$これをフェルミ速度という。\n","date":"2023-11-18T16:36:00+09:00","permalink":"https://blog.icysamon.jp/post/%E3%83%95%E3%82%A7%E3%83%AB%E3%83%9F%E3%82%A8%E3%83%8D%E3%83%AB%E3%82%AE%E3%83%BC/","title":"フェルミエネルギー"},{"content":"量子井戸(quantum well)\r電子の移動方向が束縛された状態のこと。\n境界条件\r\\(x=0\\) の点で　\\(φ(0)=0\\) \\(x=L\\) の点で　\\(φ(L)=0\\)\n$$\\varphi (x)=\\Big(\\frac{2}{L}\\Big)^{\\frac{1}{2}}\\sin\\Big(\\frac{n\\pi}{L}x\\Big)$$$$P_r=|\\varphi (x)|^2=\\Big(\\frac{2}{L}\\Big)\\sin^2\\Big(\\frac{n\\pi}{L}x\\Big)$$$$E_n=\\frac{\\pi^2\\hslash^2}{2mL^2}\\cdotp n^2$$3次元の場合\r$$\\varphi (x,y,z)=\\Big(\\frac{2}{L}\\Big)^\\frac{3}{2}\\cdotp\\sin \\Big(\\frac{n_x\\pi}{L}x\\Big)\\cdotp\\sin \\Big(\\frac{n_y\\pi}{L}y\\Big)\\cdotp\\sin \\Big(\\frac{n_z\\pi}{L}z\\Big)$$$$E_{n_x,n_y,n_z}=\\frac{\\hslash ^2}{2m}\\Big(\\frac{\\pi}{L}\\Big)^2(n_x^2+n_y^2+n_z^2)$$最大のエネルギー値 E をフェルミエネルギーという。\n","date":"2023-11-15T12:58:00+09:00","permalink":"https://blog.icysamon.jp/post/%E6%9D%9F%E7%B8%9B%E7%B2%92%E5%AD%90/","title":"束縛粒子"},{"content":"時間に依存するシュレーディンガー方程式\r$$i\\hslash\\frac{d}{dt}|\\Psi(t)\\rangle=\\hat{H}|\\Psi(t)\\rangle$$なぜならば\n$$E=\\frac{P^2}{2m}+V=H$$ポテンシャルエネルギー \\(V\\)\nすなわち\n1次元の場合は\n$$j\\hslash\\frac{\\partial\\Psi}{\\partial t}=-\\frac{\\hslash^2}{2m}\\frac{\\partial^2\\Psi}{\\partial x^2}+V\\Psi$$3次元の場合は\n$$i\\hslash\\frac{\\partial}{\\partial t}\\Psi(x,t)=\\Biggl[\\frac{-\\hslash^2}{2m}\\nabla^2+V(x,t)\\Biggr]\\Psi(x,t)$$ハミルトニアン H\r解析力学（古典力学）\r$$H=H(q,p;t)=T+V$$ 運動エネルギー \\(T\\) ポテンシャルエネルギー \\(V\\) 一般化座標 \\(q\\) 一般化運動量 \\(p\\) 時間 \\(t\\)\n量子力学\rこれは古典力学におけるハミルトニアンの技術的な定義ではありませんが、これが最も一般的に取られる形式です。これらを組み合わせると、シュレーディンガー方程式で使用される形式が得られます。\n$$\r\\begin{equation}\r\\begin{aligned}\r\\hat{H} =\\hat{T}+\\hat{V} =\\frac{\\hat{P}\\cdotp\\hat{P}}{2m}+V(r,t) =-\\frac{\\hslash^2}{2m}\\nabla^2+V(r,t)\r\\end{aligned}\r\\end{equation}\r$$ディラック定数\r$$\r\\begin{equation}\r\\begin{aligned}\r\\hslash\\equiv\\frac{h}{2\\pi} =1.054 571 817…\\times 10^{-34}J\\cdotp s =6.582119569…\\times 10^{-16}eV\\cdotp s\r\\end{aligned}\r\\end{equation}\r$$物理的意義\r$$E=h\\nu=\\frac{h}{2\\pi}\\cdotp 2\\pi\\nu =\\hslash\\omega$$$$P=\\frac{h}{\\lambda}=\\frac{h}{2\\pi}\\frac{2\\pi}{\\lambda} =\\hslash k$$ラプラシアン\r$$\\nabla^2=\\frac{\\partial^2}{\\partial x^2}+\\frac{\\partial^2}{\\partial y^2}+\\frac{\\partial^2}{\\partial z^2}$$時刻を含まないシュレーディンガーの波動方程式\r$$-\\frac{\\hslash^2}{2m}\\frac{d^2\\varphi (x)}{dx^2}+\\lbrace V(x)-E\\rbrace\\varphi (x)=0$$ エネルギー固有値 \\(E\\) 固有関数 \\(φ(x)\\) $$\\Psi(x,t)=\\varphi (x)Cexp\\Biggl(-j\\frac{E}{\\hslash}t\\Biggr )$$\\(\\varphi(x)\\)は\\(\\Psi(x,t)\\)の振幅を決める\n確率密度\r$$P_r=\\Psi^*\\cdotp\\Psi=|\\Psi|^2$$\\(\\intop_V\\Psi^*\\cdotp\\Psi dxdydz=1\\) を満足する波動関数を、1に規格化された波動関数という。\n","date":"2023-11-14T13:22:00+09:00","permalink":"https://blog.icysamon.jp/post/%E3%82%B7%E3%83%A5%E3%83%AC%E3%83%BC%E3%83%87%E3%82%A3%E3%83%B3%E3%82%AC%E3%83%BC%E3%81%AE%E6%B3%A2%E5%8B%95%E6%96%B9%E7%A8%8B%E5%BC%8F/","title":"シュレーディンガーの波動方程式"},{"content":"ド・ブロイの関係式は\n$$λ=\\frac h Ρ$$そしてPは粒子の運動量。\n$$Ρ≡mv_g$$$$Ρ=\\sqrt{2mE}\\quad (変形)$$粒子の速度は群速度であると考えられると、ド・ブロイの仮説の式が求められる。\n","date":"2023-11-13T10:36:00+09:00","permalink":"https://blog.icysamon.jp/post/%E3%83%89%E3%83%96%E3%83%AD%E3%82%A4%E3%81%AE%E9%96%A2%E4%BF%82%E5%BC%8F/","title":"ド・ブロイの関係式"},{"content":"波束（波群）\r局所的に存在する波うち/波動であり、移動する1個の波動の塊のようにふるまう。\n振幅が最大になる点は1箇所だけになる。\nこの波束だけに注目したとき、これがあたかも粒子的に振る舞うように見える。すなわち、直観的には波束が粒子であると考えることができる。\nこの説明は、物理的にはやや厳密性を失う。\n群速度\r複数の波を重ね合わせた時にその全体（波束）が移動する速度のことである。 $$v_g = \\frac{dω}{dk}$$位相速度\r各波の速度。 $$v = \\frac ω k$$関係式\r$$k≡\\frac{2π}{λ}$$ $$ω≡2πν$$","date":"2023-11-12T15:47:00+09:00","permalink":"https://blog.icysamon.jp/post/%E6%B3%A2%E6%9D%9F%E4%BD%8D%E7%9B%B8%E9%80%9F%E5%BA%A6%E7%BE%A4%E9%80%9F%E5%BA%A6/","title":"波束、位相速度、群速度"},{"content":"光の粒子性と波動性\r光はある場合には波動として振る舞い、ある場には粒子として振る舞う、つまり、いわゆる波動性と粒子性の二重性を持っている。\n電子と光同じように、粒子性と波動性の二重性をもつ。\n波粒戦争歴史\r","date":"2023-11-08T17:01:00+09:00","permalink":"https://blog.icysamon.jp/post/%E5%85%89%E3%81%AE%E7%B2%92%E5%AD%90%E6%80%A7%E3%81%A8%E6%B3%A2%E5%8B%95%E6%80%A7/","title":"光の粒子性と波動性"},{"content":"効果\r作り方\rGodot バージョンは 4.1である。\nScene 中の Node はこのように設定してください。\nDebug 用の Sprite2D はこのように設定してください。\nシングルトンノードのスクリプトに Child をロードし、変量を設定してください。\n1 2 3 4 5 6 @onready var area = $MouseDrawArea2D @onready var collision = $MouseDrawArea2D/CollisionShape2D @onready var debug = $MouseDrawArea2D/Debug var draw_start_point : Vector2 var draw_rect_point : Vector2 var drawing : bool インプット事件を設定してください。\n1 2 3 4 5 6 7 8 9 10 11 12 func _input(event): if event is InputEventMouseButton: match event.pressed \u0026amp;\u0026amp; event.button_index == MOUSE_BUTTON_LEFT: true: draw_start_point = get_global_mouse_position() draw_rect_point = draw_start_point drawing = true false: drawing = false elif event is InputEventMouseMotion \u0026amp;\u0026amp; drawing: draw_rect_point = get_global_mouse_position() draw 関数を設定してください。\n1 2 func _draw(): if drawing: draw_rect(Rect2(draw_start_point, draw_rect_point - draw_start_point), Color.GREEN, false) process 関数を設定してください。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 func _process(delta): queue_redraw() # update _draw() if drawing: # collision collision.global_position = (draw_rect_point + draw_start_point) / 2 collision.scale = draw_rect_point - draw_start_point # Debug debug.global_position = (draw_rect_point + draw_start_point) / 2 debug.scale = draw_rect_point - draw_start_point else: # collision collision.global_position = Vector2.ZERO collision.scale = Vector2.ZERO # Debug debug.global_position = Vector2.ZERO debug.scale = Vector2.ZERO return delta 注意点\r二つのサイズをこのように設定してください。\n","date":"2023-11-02T19:28:00+09:00","permalink":"https://blog.icysamon.jp/post/godot-rts-%E3%82%B2%E3%83%BC%E3%83%A0%E3%81%AE%E9%81%B8%E6%8A%9E%E3%83%9C%E3%83%83%E3%82%AF%E3%82%B9%E3%81%AE%E4%BD%9C%E3%82%8A%E6%96%B9/","title":"Godot - RTS ゲームの選択ボックスの作り方"},{"content":" 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 // Godot 4.1 #define diagonal(X, Y) pow(X, 2) + pow(Y, 2) shader_type canvas_item; uniform vec2 center = vec2(0.5, 0.5); uniform float width = 0.01; uniform float time_scale = 1.0; uniform float speed = 0.2; uniform vec4 color : source_color = vec4(1.0, 1.0, 1.0, 1.0); void fragment(){ COLOR = texture(TEXTURE, UV); if(diagonal(UV.x - center.x, UV.y - center.y) \u0026lt; abs(sin(TIME * time_scale)) * speed){ if(diagonal(UV.x - center.x, UV.y - center.y) \u0026gt; abs(sin((TIME - width) * time_scale)) * speed){ COLOR = color; } else COLOR.a = 0.0; } else COLOR.a = 0.0; } ","date":"2023-10-11T23:57:00+09:00","permalink":"https://blog.icysamon.jp/post/godot-shader-%E3%81%A7%E3%81%B5%E3%82%8D%E3%83%BC%E3%81%BE%E3%83%BC%E3%81%8F%E3%82%92%E4%BD%9C%E3%82%8B/","title":"Godot - Shader でふろーまーくを作る"},{"content":" 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 // Godot 4.1 #define diagonal(X, Y) pow(X, 2) + pow(Y, 2) shader_type canvas_item; uniform vec2 center = vec2(0.5, 0.5); uniform float r = 0.5; uniform vec4 color : source_color = vec4(1.0, 1.0, 1.0, 1.0); void fragment(){ COLOR = texture(TEXTURE, UV); if(diagonal(abs(center.x - UV.x), abs(center.y - UV.y)) \u0026lt; pow(r, 2)) COLOR = color; else COLOR.a = 0.0; } ","date":"2023-10-11T17:24:00+09:00","permalink":"https://blog.icysamon.jp/post/godot-shader-%E3%81%A7%E4%B8%B8%E3%82%92%E4%BD%9C%E3%82%8B/","title":"Godot - Shader で丸を作る"},{"content":" 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 private void MouseSelect() { RaycastHit2D hit = Physics2D.Raycast(Camera.main.ScreenToWorldPoint( Input.mousePosition), Vector2.zero); // レイヤーが命中時 if (hit.collider != null \u0026amp;\u0026amp; hit.collider.gameObject == gameObject) { transform.localScale = new Vector3(1.2f, 1.2f, 1); // オブジェクト拡大 } else { transform.localScale = new Vector3(1, 1, 1); // オブジェクト復元 } if (Input.GetMouseButtonDown(0)) { // レイヤーが命中時マウスボタンを押す if (hit.collider != null \u0026amp;\u0026amp; hit.collider.gameObject == gameObject) { } } } ","date":"2023-10-07T21:04:00+09:00","permalink":"https://blog.icysamon.jp/post/unity-%E3%83%9E%E3%82%A6%E3%82%B9%E3%81%8C%E3%82%B5%E3%82%B9%E3%83%9A%E3%83%B3%E3%83%89%E6%99%82%E3%81%AB%E3%82%AA%E3%83%96%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%82%92%E6%8B%A1%E5%A4%A7%E3%81%99%E3%82%8B/","title":"Unity - マウスがサスペンド時にオブジェクトを拡大する"},{"content":" 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 public Slider musicSlider; public Slider soundSlider; public AudioMixer mixer; private void Start() { mixer.GetFloat(\u0026#34;Music\u0026#34;, out float bgmVolume); musicSlider.value = bgmVolume; mixer.GetFloat(\u0026#34;Sound\u0026#34;, out float soundVolume); soundSlider.value = soundVolume; } public void MusicMaster(float vol) { vol = musicSlider.value; if (vol == -30f) vol = -80f; mixer.SetFloat(\u0026#34;Music\u0026#34;, vol); } public void SoundMaster(float vol) { vol = soundSlider.value; if (vol == -30f) vol = -80f; mixer.SetFloat(\u0026#34;Sound\u0026#34;, vol); } 最後にスライダーの最大値を０に設定し、最小値を-30に設定してください。\n","date":"2023-10-05T21:15:00+09:00","permalink":"https://blog.icysamon.jp/post/unity-%E3%82%B9%E3%83%A9%E3%82%A4%E3%83%80%E3%83%BC%E3%81%A7%E9%9F%B3%E9%87%8F%E3%82%92%E8%AA%BF%E6%95%B4%E3%81%99%E3%82%8B/","title":"Unity - スライダーで音量を調整する"},{"content":" 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 #if UNITY_EDITOR // エディター中 // ゲーム退出 public void ExitGame() { UnityEditor.EditorApplication.isPlaying = false; } #else // プログラム中 // ゲーム退出 public void ExitGame() { Application.Quit(); } #endif ","date":"2023-10-04T19:34:00+09:00","permalink":"https://blog.icysamon.jp/post/unity-%E3%82%B2%E3%83%BC%E3%83%A0%E3%81%AE%E9%80%80%E5%87%BA/","title":"Unity - ゲームの退出"},{"content":"UI にこれらが必要である。\nそして UI をこのようになる。\nコード\r1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 using System.Collections; using System.Collections.Generic; using TMPro; using UnityEngine; using UnityEngine.SceneManagement; using UnityEngine.UI; using static System.Net.Mime.MediaTypeNames; public class LoadManager : MonoBehaviour { [Header(\u0026#34;背景\u0026#34;)] public GameObject BackGround; [Header(\u0026#34;スライダー\u0026#34;)] public Slider slider; [Header(\u0026#34;テキスト\u0026#34;)] public TextMeshProUGUI text; public void LoadNextLevel() { StartCoroutine(LoadLevel()); } IEnumerator LoadLevel() { // operation = このシーンの番号 + 1 AsyncOperation operation = SceneManager.LoadSceneAsync(SceneManager.GetActiveScene().buildIndex + 1); while(!operation.isDone) { slider.value = operation.progress; // スライダー進度を設定 text.text = operation.progress * 100 + \u0026#34;%\u0026#34;; // テキストで進度を表示する yield return null; } } } 非同期ロードをしたい場合、LoadNextLevel() をコールする必要がある。\n","date":"2023-09-28T17:59:00+09:00","permalink":"https://blog.icysamon.jp/post/unity-%E3%82%B7%E3%83%BC%E3%83%B3%E9%9D%9E%E5%90%8C%E6%9C%9F%E3%83%AD%E3%83%BC%E3%83%89/","title":"Unity - シーン非同期ロード"},{"content":"Time.time\r1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 private float timeStart; // 計時スタート時の表記 private void Start() { timeStart = Time.time; // ゲーム開始からの時間を計時表記に設定する } private void Update() { if (Time.time - timeStart \u0026gt; 1f) // １秒計時終わった時 { timeStart = Time.time; // 計時表記のリセット // ここから自分の関数を書いてください // ここまでです } } コルーチン\r1 2 3 4 5 6 7 8 9 10 11 12 13 private void Start() { StartCoroutine(Timer()); // コルーチンのスタート } private IEnumerator Timer() // コルーチン関数の設定 { yield return new WaitForSeconds(1f); // １秒ディレイ // ここから自分の関数を書いてください // ここまでです yield break; // コルーチンの終わり } ","date":"2023-08-30T19:10:00+09:00","permalink":"https://blog.icysamon.jp/post/unity-%E3%82%BF%E3%82%A4%E3%83%9E%E3%83%BC/","title":"Unity - タイマー"},{"content":"エラーが発生した Animation を開けて、対応の AnimationEvent を選択してください。\nそして右側に以下のような Inspector が出ている。\n原因は同じ名前の関数が見つからないため、コードに同じ関数を書いたら解決可能である。\n","date":"2023-08-27T21:57:00+09:00","permalink":"https://blog.icysamon.jp/post/unity-animationevent-xxx-on-animation-xxx-has-no-receiver-%E3%82%92%E8%A7%A3%E6%B1%BA%E3%81%99%E3%82%8B/","title":"Unity - AnimationEvent \"xxx\" on animation \"xxx\" has no receiver を解決する"},{"content":" 1 2 3 4 5 6 7 8 9 10 11 12 13 # Godot 4.1 var simultaneous_scene = preload(\u0026#34;res://Scene/Test.tscn\u0026#34;).instantiate() # シーンローダー # 初期化 func _ready(): start = get_node(\u0026#34;ButtonPosition/Home/Start/Button\u0026#34;) # ボタンを取得する start.pressed.connect(self.button_pressed) # 信号接続 func button_pressed(): get_tree().root.add_child(simultaneous_scene) # シーンの切り替え ","date":"2023-08-09T23:59:00+09:00","permalink":"https://blog.icysamon.jp/post/godot-%E3%82%B7%E3%83%BC%E3%83%B3%E3%81%AE%E5%88%87%E3%82%8A%E6%9B%BF%E3%81%88/","title":"Godot - シーンの切り替え"},{"content":" 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 # Godot 4.1 extends Node @onready var exit_but = Button func _ready(): exit_but = get_node(\u0026#34;Button\u0026#34;) # ノードをゲット exit_but.pressed.connect(self._button_pressed) # ボタン押下チェック func _process(delta): pass # 退出申請を発送 func _button_pressed(): get_tree().root.propagate_notification(NOTIFICATION_WM_CLOSE_REQUEST) # 退出申請を受け時ゲームを終わる func _notification(what): if what == NOTIFICATION_WM_CLOSE_REQUEST: get_tree().quit() # default behavior ","date":"2023-08-08T12:02:00+09:00","permalink":"https://blog.icysamon.jp/post/godot-%E3%82%B2%E3%83%BC%E3%83%A0%E9%80%80%E5%87%BA%E3%83%9C%E3%82%BF%E3%83%B3/","title":"Godot - ゲーム退出ボタン"},{"content":" 1 2 3 4 5 6 7 8 # Godot 4.1 # ゲーム解像度を取得する var width = ProjectSettings.get_setting( \u0026#34;display/window/size/viewport_width\u0026#34;) var height = ProjectSettings.get_setting( \u0026#34;display/window/size/viewport_height\u0026#34;) print(\u0026#34;width:\u0026#34; + str(width) + \u0026#34; height:\u0026#34; + str(height)) ","date":"2023-08-03T21:43:00+09:00","permalink":"https://blog.icysamon.jp/post/godot-%E3%82%B2%E3%83%BC%E3%83%A0%E8%A7%A3%E5%83%8F%E5%BA%A6%E3%82%92%E5%8F%96%E5%BE%97%E3%81%99%E3%82%8B/","title":"Godot - ゲーム解像度を取得する"},{"content":" 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 # Godot 4.1 extends RigidBody2D # ノード var node0 # データ var target # 初期化 func _ready(): node0 = get_node(\u0026#34;.\u0026#34;) # 自分のノードを取る # フレーム実行 func _process(delta): follow_mouse() # インプット事件 func _input(event): if InputEventMouseMotion: # マウス移動 target = get_global_mouse_position() # マウスのグローバル座標を取る # マウスにつき従う func follow_mouse(): node0.position = target # ノード座標とマウス座標を同期する ","date":"2023-08-03T13:59:00+09:00","permalink":"https://blog.icysamon.jp/post/godot-%E5%89%9B%E4%BD%93%E3%82%92%E3%83%9E%E3%82%A6%E3%82%B9%E3%81%AE%E5%8B%95%E3%81%8D%E3%81%AB%E3%81%A4%E3%81%8D%E5%BE%93%E3%81%86/","title":"Godot - 剛体をマウスの動きにつき従う"},{"content":"ウィンドウズシステムズのノートで以下のコードを書いてください。\n1 2 3 Windows Registry Editor Version 5.00 [HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\TimeZoneInformation] \u0026#34;RealTimeIsUniversal\u0026#34; = dword:00000001 そしてファイルに保存して、.txt 形式を .reg 形式に変更してください。\n最後にはファイルを実行し、設定を完了してください。\n","date":"2023-07-12T19:41:00+09:00","permalink":"https://blog.icysamon.jp/post/ubuntu-%E3%81%A8-win-10-%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%81%AE%E6%99%82%E5%88%BB%E3%81%8C%E4%B8%80%E8%87%B4%E3%81%97%E3%81%AA%E3%81%84%E3%82%92%E8%A7%A3%E6%B1%BA%E3%81%99%E3%82%8B/","title":"Ubuntu と Win 10 システムの時刻が一致しないを解決する"},{"content":"環境\rSTM32CubeIDE 1.12.0 STM32CubeProgrammer 接続方法は SWD 解決方法\r開発ボードの輸入電源ピンは STLink の VCC ではなく TVCC である。\nSTLink の VCC は出力ピンではなく入力ピンであるため、開発ボードに単独給電が必要である。\n","date":"2023-07-08T16:22:00+09:00","permalink":"https://blog.icysamon.jp/post/stlink-%E3%82%A8%E3%83%A9%E3%83%BC-localhost61234-connection-timed-out-%E3%82%92%E8%A7%A3%E6%B1%BA%E3%81%99%E3%82%8B/","title":"STLink エラー localhost:61234: Connection timed out を解決する"},{"content":"前言\rMinGW をインストール直後にこの問題が発生したので、MinGW のせいかもしれないと思った。最初には、PC の再起動、エディタの再インストール、システムパスなど様々の変更を試したが残念ながら全部失敗した。\n解決方法\rレジストリエディターに入ってください（ win+R で実行メニューに入るし、regedit を入力して Enter を押してください） 目録 HKEY_CURRENT_USER\\Software\\Microsoft\\Command Processor 中の AutoRun の値をクリアしてください。 目録 HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Command Processor をチェックして、もしAutoRun があるなら同じ操作をしてください。 ","date":"2023-07-06T21:48:00+09:00","permalink":"https://blog.icysamon.jp/post/unity-the-system-cannot-find-the-path-specified-%E3%82%92%E8%A7%A3%E6%B1%BA%E3%81%99%E3%82%8B/","title":"Unity - The system cannot find the path specified を解決する"},{"content":"原因\rファイルの権限設定が不正だと思う。\n解決方法\rFTP ツールでサーバーを訪問し、WordPress がインストールされた位置に以下のフォルダの訪問権限を 755 に設定してください。(フォルダのみ)\nwp-admin wp-content wp-includes その後、すべてファイルの権限を 644 に設定してください。(ファイルのみ) を添加してください。\nもし .htaccess の中に\n1 RewriteRule .*\\.(jpg|jpeg|gif|png|bmp)$ - [F,NC] があれば、ファイルを正常にアクセスためにこれを注釈する必要がある。\n","date":"2023-06-19T11:33:00+09:00","permalink":"https://blog.icysamon.jp/post/wordpress-%E3%83%A1%E3%83%87%E3%82%A3%E3%82%A2%E3%81%AE403%E3%82%A8%E3%83%A9%E3%83%BC%E3%82%92%E8%A7%A3%E6%B1%BA%E3%81%99%E3%82%8B/","title":"WordPress - メディアの403エラーを解決する"},{"content":"FTP工具で /「WordPressインストール位置」/wp-content/plugins/syntaxhighlighter を開けて\nversion3 を使っている場合、/syntaxhighlighter3/styles を開けてください。 version2 を使っている場合、/syntaxhighlighter２/styles を開けてください。 shCore.css で font-family を自由に設定することができる。\n","date":"2023-05-20T21:16:00+09:00","permalink":"https://blog.icysamon.jp/post/syntaxhighlighter-%E3%81%AE-font-family-%E3%82%92%E5%A4%89%E6%9B%B4%E3%81%99%E3%82%8B/","title":"SyntaxHighlighter の font-family を変更する"},{"content":"FTP工具で .htaccess に以下のコードを追加してください。\n1 2 3 RewriteEngine On RewriteCond %{HTTPS} !=on RewriteRule ^ https://%{HTTP_HOST}%{REQUEST_URI} [L,R=301] そしてエラーを防ぐため、これらのコードも追加してください。\n1 2 3 RewriteOptions inherit RewriteEngine on Header set content-Security-Policy: upgrade-insecure-requests ","date":"2023-05-16T20:47:00+09:00","permalink":"https://blog.icysamon.jp/post/htaccess-%E3%81%A7-http-%E3%81%8B%E3%82%89-https-%E3%81%AB%E3%83%AA%E3%83%80%E3%82%A4%E3%83%AC%E3%82%AF%E3%83%88%E3%81%99%E3%82%8B/","title":"htaccess で http から https にリダイレクトする"},{"content":"FTP 工具で public_html 中の wp-config.php を開けて\n1 define(\u0026#39;DISALLOW_FILE_EDIT\u0026#39;, true); があれば、true を false に変更してください。\nなければ\n1 define(\u0026#39;DISALLOW_FILE_EDIT\u0026#39;, false); を添加してください。\n","date":"2023-05-16T10:23:00+09:00","permalink":"https://blog.icysamon.jp/post/wordpress-theme-editor-%E3%81%8C%E8%A1%A8%E7%A4%BA%E3%81%95%E3%82%8C%E3%81%A6%E3%81%84%E3%81%AA%E3%81%84%E6%99%82%E3%81%AE%E8%A7%A3%E6%B1%BA%E6%96%B9%E6%B3%95/","title":"WordPress - Theme Editor が表示されていない時の解決方法"}]